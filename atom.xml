<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZhangHy&#39;s Zone!</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://weibo.com/"/>
  <updated>2018-12-07T05:32:18.663Z</updated>
  <id>http://weibo.com/</id>
  
  <author>
    <name>ZhangHy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>原生js合并两个数组以及call,apply,bind</title>
    <link href="http://weibo.com/2018/12/07/%E5%8E%9F%E7%94%9Fjs%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E4%BB%A5%E5%8F%8Acall-apply-bind/"/>
    <id>http://weibo.com/2018/12/07/原生js合并两个数组以及call-apply-bind/</id>
    <published>2018-12-07T05:06:29.000Z</published>
    <updated>2018-12-07T05:32:18.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js合并两个数组"><a href="#js合并两个数组" class="headerlink" title="js合并两个数组"></a>js合并两个数组</h2><p>如：<br>var a = [1,2,3];<br>var b = [4,5,6];</p>
<h3 id="1、concat"><a href="#1、concat" class="headerlink" title="1、concat"></a>1、concat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var c = a.concat(b); //c=[1,2,3,4,5,6]</div></pre></td></tr></table></figure>
<p>问题：concat方法连接a、b两个数组后，a、b两个数组的数据不变，同时会返回一个新的数组。这样当我们需要进行多次的数组合并时，会造成很大的内存浪费</p>
<h3 id="2、for循环"><a href="#2、for循环" class="headerlink" title="2、for循环"></a>2、for循环</h3><p>遍历其中一个数组，把该数组中的所有元素依次添加到另外一个数组中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(var i <span class="keyword">in</span> b) &#123;</div><div class="line">    a.push(b[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3、apply"><a href="#3、apply" class="headerlink" title="3、apply"></a>3、apply</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">push.apply(a,b)   等同于  a.push.apply(a,[4,5,6])</div></pre></td></tr></table></figure>
<h3 id="4、说明："><a href="#4、说明：" class="headerlink" title="4、说明："></a>4、说明：</h3><p>1）以上3种合并方法并没有考虑过a、b两个数组谁的长度更小。<br>2）所以好的做法是预先判断a、b两个数组哪个更大，然后使用大数组合并小数组，这样就减少了数组元素操作的次数！<br>3）有时候我们不希望原数组（a、b）改变，这时就只能使用concat了。</p>
<h2 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call(), apply(), bind()"></a>call(), apply(), bind()</h2><h3 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var name=<span class="string">'zhang'</span>,age=17;</div><div class="line">var obj = &#123;</div><div class="line">    name: <span class="string">'hong'</span>,</div><div class="line">    objAge: this.age,</div><div class="line">    myFun: <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        console.log(this.name+<span class="string">','</span>+this.age);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">obj.objAge;  //17</div><div class="line">obj.myFun()  //hong,undefined</div></pre></td></tr></table></figure>
<h3 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var name = <span class="string">'yuan'</span>;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">show</span></span>()&#123;</div><div class="line">    console.log(this.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">show() //yuan</div></pre></td></tr></table></figure>
<h4 id="比较一下这两者this-的差别，第一个this指向obj，第二个全局声明的shows-函数this是window"><a href="#比较一下这两者this-的差别，第一个this指向obj，第二个全局声明的shows-函数this是window" class="headerlink" title="比较一下这两者this 的差别，第一个this指向obj，第二个全局声明的shows()函数this是window;"></a>比较一下这两者this 的差别，第一个this指向obj，第二个全局声明的shows()函数this是window;</h4><h3 id="call-、apply-、bind-都是用来重定义-this这个对象的"><a href="#call-、apply-、bind-都是用来重定义-this这个对象的" class="headerlink" title="call()、apply()、bind() 都是用来重定义 this这个对象的"></a>call()、apply()、bind() 都是用来重定义 this这个对象的</h3><p>如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var name=<span class="string">'zhang'</span>,age=17;</div><div class="line">var obj = &#123;</div><div class="line">    name: <span class="string">'hong'</span>,</div><div class="line">    objAge: this.age,</div><div class="line">    myFun: <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        console.log(this.name+<span class="string">','</span>+this.age);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var db = &#123;</div><div class="line">    name: <span class="string">'yuan'</span>,</div><div class="line">    age: 20</div><div class="line">&#125;</div><div class="line"></div><div class="line">obj.myFun.call(db)；　　　//yuan,20</div><div class="line">obj.myFun.apply(db);　　　//yuan,20</div><div class="line">obj.myFun.bind(db)();　　 //yuan,20</div></pre></td></tr></table></figure></p>
<p>以上出了bind方法后面多了个()外 ，结果返回都一致。<br>由此得出结论，bind返回的是一个新的函数，你必须调用它才会被执行。</p>
<h3 id="对比call-、bind-、-apply-传参情况下"><a href="#对比call-、bind-、-apply-传参情况下" class="headerlink" title="对比call 、bind 、 apply 传参情况下"></a>对比call 、bind 、 apply 传参情况下</h3><p>如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var name=<span class="string">'zhang'</span>,age=17;</div><div class="line">var obj = &#123;</div><div class="line">    name: <span class="string">'hong'</span>,</div><div class="line">    objAge: this.age,</div><div class="line">    myFun: <span class="keyword">function</span>(fm,t)&#123;</div><div class="line">        console.log(this.name+<span class="string">', '</span>+this.age+<span class="string">', '</span>+fm+<span class="string">'&amp;&amp;'</span>+t);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var db = &#123;</div><div class="line">    name: <span class="string">'yuan'</span>,</div><div class="line">    age: 20</div><div class="line">&#125;</div><div class="line"></div><div class="line">obj.myFun.call(db,<span class="string">'one'</span>,<span class="string">'two'</span>)；　　　//yuan, 20, one&amp;&amp;two</div><div class="line">obj.myFun.apply(db,[<span class="string">'one'</span>,<span class="string">'two'</span>]);　　　//yuan, 20, one&amp;&amp;two</div><div class="line">obj.myFun.bind(db,<span class="string">'one'</span>,<span class="string">'two'</span>)();　　 //yuan, 20, one&amp;&amp;two</div><div class="line">obj.myFun.bind(db,[<span class="string">'one'</span>,<span class="string">'two'</span>])();　　 //yuan, 20, one,two&amp;&amp;undefined</div></pre></td></tr></table></figure></p>
<p>从上面四个结果不难看出call 、bind 、 apply这三个函数的第一个参数都是this的指向对象，第二个参数差别就来了：<br>call的参数是直接放进去的，第二、第三、第n个参数全都用逗号分隔，直接放到后面  obj.myFun.call(db,’one’, … ,’string’ );<br>apply的所有参数都必须放在一个数组里面传进去obj.myFun.apply(db,[‘one’, …, ‘string’ ]);<br>bind除了返回是函数以外，它的参数和call一样。<br>当然，三者的参数不限定是string类型，允许是各种类型，包括函数 、 object 等等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;js合并两个数组&quot;&gt;&lt;a href=&quot;#js合并两个数组&quot; class=&quot;headerlink&quot; title=&quot;js合并两个数组&quot;&gt;&lt;/a&gt;js合并两个数组&lt;/h2&gt;&lt;p&gt;如：&lt;br&gt;var a = [1,2,3];&lt;br&gt;var b = [4,5,6];&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://weibo.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux下打包和解压缩命令并通过PHP进行页面下载</title>
    <link href="http://weibo.com/2018/12/07/Linux%E4%B8%8B%E6%89%93%E5%8C%85%E5%92%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4%E5%B9%B6%E9%80%9A%E8%BF%87PHP%E8%BF%9B%E8%A1%8C%E9%A1%B5%E9%9D%A2%E4%B8%8B%E8%BD%BD/"/>
    <id>http://weibo.com/2018/12/07/Linux下打包和解压缩命令并通过PHP进行页面下载/</id>
    <published>2018-12-07T03:36:31.000Z</published>
    <updated>2018-12-07T04:21:32.687Z</updated>
    
    <content type="html"><![CDATA[<p>工作过程中需要将x86设备上的某个文件夹进行打包，然后实现页面下载压缩包的需求。由于工作机上面不支持ZIP工具压缩，于是采用PHP代码嵌入linux tar打包命令实现。<br>PHP代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$dir_path</span> = <span class="string">'/disk/report_pdf/'</span>;</div><div class="line"><span class="built_in">exec</span>(<span class="string">'cd '</span>.<span class="variable">$dir_path</span>.<span class="string">' &amp;&amp; tar -zcvf report.tar.gz -C /disk/report_pdf .'</span>); </div><div class="line">// -C参数是解决打包之后带有文件路径的问题，记住最后一定要加 . 。</div></pre></td></tr></table></figure></p>
<h2 id="拓展-Linux下打包和解压缩命令及参数说明："><a href="#拓展-Linux下打包和解压缩命令及参数说明：" class="headerlink" title="拓展 || Linux下打包和解压缩命令及参数说明："></a>拓展 || Linux下打包和解压缩命令及参数说明：</h2><h3 id="解压缩命令："><a href="#解压缩命令：" class="headerlink" title="解压缩命令："></a>解压缩命令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">.tar</div><div class="line">压缩：tar cvf FileName.tar FileName</div><div class="line">解压：tar xvf FileName.tar</div><div class="line">--------------------------------------------- </div><div class="line">.gz</div><div class="line">解压1：gunzip FileName.gz </div><div class="line">解压2：gzip -d FileName.gz </div><div class="line">压缩：gzip FileName </div><div class="line">.tar.gz </div><div class="line">解压：tar zxvf FileName.tar.gz </div><div class="line">压缩：tar zcvf FileName.tar.gz DirName </div><div class="line">--------------------------------------------- </div><div class="line">.bz2 </div><div class="line">解压1：bzip2 -d FileName.bz2 </div><div class="line">解压2：bunzip2 FileName.bz2 </div><div class="line">压缩： bzip2 -z FileName </div><div class="line">.tar.bz2 </div><div class="line">解压：tar jxvf FileName.tar.bz2 </div><div class="line">压缩：tar jcvf FileName.tar.bz2 DirName </div><div class="line">--------------------------------------------- </div><div class="line">.bz </div><div class="line">解压1：bzip2 -d FileName.bz </div><div class="line">解压2：bunzip2 FileName.bz </div><div class="line">压缩：未知 </div><div class="line">.tar.bz </div><div class="line">解压：tar jxvf FileName.tar.bz </div><div class="line">压缩：未知 </div><div class="line">--------------------------------------------- </div><div class="line">.Z </div><div class="line">解压：uncompress FileName.Z </div><div class="line">压缩：compress FileName </div><div class="line">.tar.Z </div><div class="line">解压：tar Zxvf FileName.tar.Z </div><div class="line">压缩：tar Zcvf FileName.tar.Z DirName </div><div class="line">--------------------------------------------- </div><div class="line">.tgz </div><div class="line">解压：tar zxvf FileName.tgz </div><div class="line">压缩：未知 </div><div class="line">.tar.tgz </div><div class="line">解压：tar zxvf FileName.tar.tgz </div><div class="line">压缩：tar zcvf FileName.tar.tgz FileName </div><div class="line">--------------------------------------------- </div><div class="line">.zip </div><div class="line">解压：unzip FileName.zip </div><div class="line">压缩：zip FileName.zip DirName </div><div class="line">--------------------------------------------- </div><div class="line">.rar </div><div class="line">解压：rar a FileName.rar </div><div class="line">压缩：rar e FileName.rar </div><div class="line">--------------------------------------------- </div><div class="line"></div><div class="line">后缀的含义如下：</div><div class="line">.tar打包格式：tar程序打包的数据，并没有压缩过</div><div class="line">.z格式：compress程序压缩的文件</div><div class="line">.gz压缩格式：gzip程序压缩的文件 .bz2压缩格式：bzip2程序压缩的文件</div><div class="line">.tar.gz打包压缩：tar程序打包的文件，其中并且经过 gzip 的压缩</div><div class="line">.tar.bz2打包压缩：tar程序打包的文件，其中并且经过 bzip2 的压缩</div></pre></td></tr></table></figure>
<h3 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h3><h4 id="1、主选项："><a href="#1、主选项：" class="headerlink" title="1、主选项："></a>1、主选项：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-c 创建新的档案文件。如果用户想备份一个目录或是一些文件，就要选择这个选项。</div><div class="line">-r 把要存档的文件追加到档案文件的未尾。例如用户已经做好备份文件，又发现还有一个目录或是一些文件忘记备份了，这时可以使用该选项，将忘记的目录或文件追加到备份文件中。</div><div class="line">-t 列出档案文件的内容，查看已经备份了哪些文件。</div><div class="line">-u 更新文件。就是说，用新增的文件取代原备份文件，如果在备份文件中找不到要更新的文件，则把它追加到备份文件的最后。</div><div class="line">-x 从档案文件中释放文件。</div></pre></td></tr></table></figure>
<h4 id="说明：主选项是独立的命令，压缩解压都要用到其中一个，可以和辅助选项连用但这五个命令只能用其中一个。"><a href="#说明：主选项是独立的命令，压缩解压都要用到其中一个，可以和辅助选项连用但这五个命令只能用其中一个。" class="headerlink" title="说明：主选项是独立的命令，压缩解压都要用到其中一个，可以和辅助选项连用但这五个命令只能用其中一个。"></a>说明：主选项是独立的命令，压缩解压都要用到其中一个，可以和辅助选项连用但这五个命令只能用其中一个。</h4><h4 id="2、辅助选项："><a href="#2、辅助选项：" class="headerlink" title="2、辅助选项："></a>2、辅助选项：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-b 该选项是为磁带机设定的，其后跟一数字，用来说明区块的大小，系统预设值为20（20×512 bytes）。</div><div class="line">-f 指定档案文件名或设备名，这个选项通常是必选的,这个参数是最后一个参数。</div><div class="line">-k 保存已经存在的文件。例如把某个文件还原，在还原的过程中遇到相同的文件，不会进行覆盖。</div><div class="line">-m 在还原文件时，把所有文件的修改时间设定为现在。</div><div class="line">-M 创建多卷的档案文件，以便在几个磁盘中存放。</div><div class="line">-v 详细报告tar处理的文件信息。如无此选项，tar不报告文件信息。</div><div class="line">-w 每一步都要求确认。</div><div class="line">-z 用gzip来压缩/解压缩文件，加上该选项后可以将档案文件进行压缩，但还原时也一定要使用该选项进行解压缩。</div></pre></td></tr></table></figure>
<h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">tar -cf FileName.tar DirName：这条命令是将DirName的文件夹打成一个名为FileName.tar的包。-c是表示产生新的包，-f指定包的文件名；</div><div class="line"></div><div class="line">tar -cf FileName.tar *.jpg：这条命令是将所有.jpg的文件打成一个名为FileName.tar的包；</div><div class="line"></div><div class="line">tar -rf FileName.tar *.gif：这条命令是将所有.gif的文件增加到FileName.tar的包里面去。-r是表示增加文件的意思；</div><div class="line"></div><div class="line">tar -uf FileName.tar logo.gif：这条命令是更新原来tar包FileName.tar中logo.gif文件，-u是表示更新文件的意思；</div><div class="line"></div><div class="line">tar -tf FileName.tar：这条命令是列出FileName.tar包中所有文件，-t是列出文件的意思；</div><div class="line"></div><div class="line">tar -xf FileName.tar：这条命令是解出FileName.tar包中所有文件，-x是解开的意思</div></pre></td></tr></table></figure>
<h3 id="PHP实现页面压缩包下载"><a href="#PHP实现页面压缩包下载" class="headerlink" title="PHP实现页面压缩包下载"></a>PHP实现页面压缩包下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> back_pacp_file()</div><div class="line">&#123;</div><div class="line">    <span class="variable">$channel</span> = file_get_contents(<span class="string">'/etc/asterisk/channel.conf'</span>);</div><div class="line">    <span class="variable">$date</span> = date(<span class="string">'y-m-d'</span>,time());</div><div class="line">    <span class="variable">$pcap_file_name</span> = <span class="string">"<span class="variable">$date_</span><span class="variable">$channel</span>.tar.gz"</span>;</div><div class="line">    <span class="variable">$pcap_file_path</span> = <span class="string">"/tmp/<span class="variable">$pcap_file_name</span>"</span>;</div><div class="line"></div><div class="line">    <span class="variable">$pack_cmd</span> = <span class="string">"tar vcz -f <span class="variable">$pcap_file_path</span> /tmp/"</span>.<span class="variable">$date</span>.<span class="string">"_"</span>.<span class="variable">$channel</span>.<span class="string">".pcap"</span>;</div><div class="line"></div><div class="line">    <span class="built_in">exec</span>(<span class="string">"<span class="variable">$pack_cmd</span> &gt; /dev/null 2&gt;&amp;1 || echo $?"</span>,<span class="variable">$output</span>);</div><div class="line">    <span class="keyword">if</span>(<span class="variable">$output</span>) &#123;</div><div class="line">        <span class="built_in">echo</span> <span class="string">"&lt;/br&gt;<span class="variable">$pcap_file_name</span> "</span>;</div><div class="line">        <span class="built_in">echo</span> language(<span class="string">"Packing was failed"</span>);<span class="built_in">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line">        <span class="built_in">echo</span> language(<span class="string">"Error code"</span>);<span class="built_in">echo</span> <span class="string">": "</span>.<span class="variable">$output</span>[0];</div><div class="line">        <span class="built_in">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!file_exists(<span class="variable">$pcap_file_path</span>)) &#123;</div><div class="line">        <span class="built_in">echo</span> <span class="string">"&lt;/br&gt;<span class="variable">$pcap_file_name</span>"</span>;</div><div class="line">        <span class="built_in">echo</span> language(<span class="string">"Can not find"</span>);</div><div class="line">        <span class="built_in">return</span>;</div><div class="line">    &#125;</div><div class="line">    //打开文件  </div><div class="line">    <span class="variable">$fd</span> = fopen (<span class="variable">$pcap_file_path</span>, <span class="string">"r"</span> ); </div><div class="line">    <span class="variable">$size</span> = filesize(<span class="variable">$pcap_file_path</span>) ;</div><div class="line">    //输入文件标签 </div><div class="line">    header(<span class="string">'Content-Encoding: none'</span>);</div><div class="line">    header(<span class="string">'Content-Type: application/force-download'</span>);</div><div class="line">    header(<span class="string">'Content-Type: application/octet-stream'</span>);</div><div class="line">    header(<span class="string">'Content-Type: application/download'</span>);</div><div class="line">    header(<span class="string">'Content-Description: File Transfer'</span>);  </div><div class="line">    header(<span class="string">'Accept-Ranges: bytes'</span>);  </div><div class="line">    header(<span class="string">"Accept-Length: <span class="variable">$size</span>"</span>);  </div><div class="line">    header(<span class="string">'Content-Transfer-Encoding: binary'</span> );</div><div class="line">    header(<span class="string">"Content-Disposition: attachment; filename=<span class="variable">$pcap_file_name</span>"</span> ); </div><div class="line">    header(<span class="string">'Pragma: no-cache'</span>);</div><div class="line">    header(<span class="string">'Expires: 0'</span>);</div><div class="line"></div><div class="line">    //输出文件内容   </div><div class="line">    ob_clean(); //清除输出缓存内容，如果没有的话下载的文件或者压缩包可能是空的</div><div class="line">    flush();    //刷新系统输出缓存</div><div class="line">    <span class="built_in">echo</span> fread(<span class="variable">$fd</span>, <span class="variable">$size</span>);  //读取文件内容并直接输出到浏览器</div><div class="line">    fclose (<span class="variable">$fd</span>);</div><div class="line">    unlink(<span class="variable">$pcap_file_path</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作过程中需要将x86设备上的某个文件夹进行打包，然后实现页面下载压缩包的需求。由于工作机上面不支持ZIP工具压缩，于是采用PHP代码嵌入linux tar打包命令实现。&lt;br&gt;PHP代码：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;
    
    </summary>
    
      <category term="Linux,PHP" scheme="http://weibo.com/categories/Linux-PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>原生js去重的方法</title>
    <link href="http://weibo.com/2018/12/06/%E5%8E%9F%E7%94%9Fjs%E5%8E%BB%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://weibo.com/2018/12/06/原生js去重的方法/</id>
    <published>2018-12-06T12:22:47.000Z</published>
    <updated>2018-12-07T03:27:14.392Z</updated>
    
    <content type="html"><![CDATA[<p>主要写一下前端面试中经常会面到的一个题目，不过在实际开发过程中很少使用原生js去重。<br><a id="more"></a></p>
<h2 id="方法1：循环，比对"><a href="#方法1：循环，比对" class="headerlink" title="方法1：循环，比对"></a>方法1：循环，比对</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var s = ary.join(<span class="string">","</span>)+<span class="string">","</span>;</div><div class="line"><span class="keyword">for</span>(var i=0;i&lt;ary.length;i++)&#123;</div><div class="line">    <span class="keyword">if</span>(s.replace(ary[i]+<span class="string">","</span>,<span class="string">""</span>).indexOf(ary[i]+<span class="string">","</span>)&gt;-1)&#123;</div><div class="line">        alert(<span class="string">"数组中有重复元素："</span>+ary[i])</div><div class="line">        <span class="built_in">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法2：排序，循环，比对"><a href="#方法2：排序，循环，比对" class="headerlink" title="方法2：排序，循环，比对"></a>方法2：排序，循环，比对</h2><p>sort() : 返回一个元素已经进行了排序的 Array 对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var ary = new Array(<span class="string">"111"</span>,<span class="string">"22"</span>,<span class="string">"33"</span>,<span class="string">"111"</span>);</div><div class="line">var nary = ary.sort();</div><div class="line"><span class="keyword">for</span>(var i=0;i&lt;ary.length;i++)&#123;</div><div class="line">    <span class="keyword">if</span> (nary[i]==nary[i+1])&#123;</div><div class="line">        alert(<span class="string">"数组重复内容："</span>+nary[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="方法3：定义函数"><a href="#方法3：定义函数" class="headerlink" title="方法3：定义函数"></a>方法3：定义函数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> isRepeat(arr)&#123;</div><div class="line">    var <span class="built_in">hash</span> = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span>(var i <span class="keyword">in</span> arr) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">hash</span>[arr[i]])</div><div class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="built_in">hash</span>[arr[i]] = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要写一下前端面试中经常会面到的一个题目，不过在实际开发过程中很少使用原生js去重。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://weibo.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>解决jQuery表单submit报错的问题</title>
    <link href="http://weibo.com/2018/12/06/%E8%A7%A3%E5%86%B3jQuery%E8%A1%A8%E5%8D%95submit%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://weibo.com/2018/12/06/解决jQuery表单submit报错的问题/</id>
    <published>2018-12-06T12:09:03.000Z</published>
    <updated>2018-12-06T12:20:28.498Z</updated>
    
    <content type="html"><![CDATA[<p>工作过程中遇到表单提交的时候报错，于是在网上了找了找文档，发现如下解决方案，完美解决工作问题：<br><a id="more"></a></p>
<h2 id="问题：解决jquery-submit-提交表单提示-e-h-is-not-a-function"><a href="#问题：解决jquery-submit-提交表单提示-e-h-is-not-a-function" class="headerlink" title="问题：解决jquery submit()提交表单提示 e[h] is not a function"></a>问题：解决jquery submit()提交表单提示 e[h] is not a function</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;form id=<span class="string">"login_form"</span>&gt;</div><div class="line">    &lt;input id=<span class="string">"submits"</span> class=<span class="string">"manlogin"</span> <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"登录"</span> /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">$(<span class="string">"#submits"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    $(<span class="string">"#login_form"</span>).submit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>1.form表单中存在type=”submit”的标签,任何js中$(“#login_form”).submit(); 都无效<br>2.当<input id="submits2" class="manlogin" type="button" value="登录123"><br>$(“#submits2”).click(function(){<br>    $(“#login_form”).submit();<br>});<br>这样就会报 e[h] is not a function</p>
<p><input id="submits" class="manlogin" type="sbmit" value="登录"> 提交有效</p>
<h2 id="问题：原生js表单同步提交和提交前操作，以及document-form-submit-is-not-a-function"><a href="#问题：原生js表单同步提交和提交前操作，以及document-form-submit-is-not-a-function" class="headerlink" title="问题：原生js表单同步提交和提交前操作，以及document.form.submit() is not a function"></a>问题：原生js表单同步提交和提交前操作，以及document.form.submit() is not a function</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    var_dump(<span class="variable">$_POST</span>);   //var_dump打印变量的相关信息</div><div class="line">?&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script language=<span class="string">"javascript"</span>&gt;</div><div class="line">    <span class="keyword">function</span> SendForm () </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(CheckPost()) </div><div class="line">        &#123;</div><div class="line">            document.addForm.submit();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">function</span> CheckPost () </div><div class="line">    &#123;</div><div class="line">         <span class="keyword">if</span> (addForm.user.value == <span class="string">""</span>) </div><div class="line">         &#123;</div><div class="line">               alert(<span class="string">"请填写用户名！"</span>);</div><div class="line">               addForm.username.focus();</div><div class="line">               <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">if</span> (addForm.title.value.length &lt; 5) </div><div class="line">         &#123;</div><div class="line">               alert(<span class="string">"标题不能少于5个字符！"</span>);</div><div class="line">               addForm.title.focus();</div><div class="line">               <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">         &#125;</div><div class="line">         <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;form action=<span class="string">"test.php"</span> method=<span class="string">"post"</span> name=<span class="string">"addForm"</span>&gt;</div><div class="line">     &lt;div&gt;用户:&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> size=<span class="string">"10"</span> name=<span class="string">"user"</span> maxlength=<span class="string">"20"</span>/&gt;&lt;/div&gt;</div><div class="line">     &lt;div&gt;标题:&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"title"</span> maxlength=<span class="string">"50"</span>/&gt;&lt;/div&gt;</div><div class="line">     &lt;div&gt;内容:&lt;textarea name=<span class="string">"content"</span> rows=<span class="string">"8"</span> cols=<span class="string">"30"</span>&gt;&lt;/textarea&gt;&lt;/div&gt;</div><div class="line">     &lt;div&gt;&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> name=<span class="string">"submit"</span> value=”发表” onclick=<span class="string">"SendForm();"</span>/&gt;&lt;/div&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="问题原因："><a href="#问题原因：" class="headerlink" title="问题原因："></a>问题原因：</h3><p>当表单<form>…</form>中含有name=”submit”时，提交时就会有冲突，这个错误常见于按钮上，如:<br>在javascript做submit()的时候就会出现冲突，这时将name=”submit”改成别的比如login之类的就可以了，反正submit在这个情况下是个保留关键字。<br>在表单的输入框中使用了<input name="submit" type="text">，这样也是不行的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作过程中遇到表单提交的时候报错，于是在网上了找了找文档，发现如下解决方案，完美解决工作问题：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="jQuery" scheme="http://weibo.com/categories/jQuery/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP获取今日/昨日/上周/本月的起始时间戳和结束时间戳的方法</title>
    <link href="http://weibo.com/2018/12/06/PHP%E8%8E%B7%E5%8F%96%E4%BB%8A%E6%97%A5-%E6%98%A8%E6%97%A5-%E4%B8%8A%E5%91%A8-%E6%9C%AC%E6%9C%88%E7%9A%84%E8%B5%B7%E5%A7%8B%E6%97%B6%E9%97%B4%E6%88%B3%E5%92%8C%E7%BB%93%E6%9D%9F%E6%97%B6%E9%97%B4%E6%88%B3%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://weibo.com/2018/12/06/PHP获取今日-昨日-上周-本月的起始时间戳和结束时间戳的方法/</id>
    <published>2018-12-06T11:50:09.000Z</published>
    <updated>2018-12-06T12:07:27.619Z</updated>
    
    <content type="html"><![CDATA[<p>php 获取今日、昨日、上周、本月的起始时间戳和结束时间戳的方法，主要使用到了 php 的时间函数 mktime。<br><a id="more"></a></p>
<h2 id="php获取今日开始时间戳和结束时间戳"><a href="#php获取今日开始时间戳和结束时间戳" class="headerlink" title="php获取今日开始时间戳和结束时间戳"></a>php获取今日开始时间戳和结束时间戳</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$beginToday</span> = mktime(0,0,0,date(<span class="string">'m'</span>),date(<span class="string">'d'</span>),date(<span class="string">'Y'</span>));</div><div class="line"><span class="variable">$endToday</span> = mktime(0,0,0,date(<span class="string">'m'</span>),date(<span class="string">'d'</span>)+1,date(<span class="string">'Y'</span>))-1;</div></pre></td></tr></table></figure>
<h2 id="php获取昨日开始时间戳和结束时间戳"><a href="#php获取昨日开始时间戳和结束时间戳" class="headerlink" title="php获取昨日开始时间戳和结束时间戳"></a>php获取昨日开始时间戳和结束时间戳</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$beginYesterday</span> = mktime(0,0,0,date(<span class="string">'m'</span>),date(<span class="string">'d'</span>)-1,date(<span class="string">'Y'</span>));</div><div class="line"><span class="variable">$endYesterday</span> = mktime(0,0,0,date(<span class="string">'m'</span>),date(<span class="string">'d'</span>),date(<span class="string">'Y'</span>))-1;</div></pre></td></tr></table></figure>
<h2 id="php获取上周起始时间戳和结束时间戳"><a href="#php获取上周起始时间戳和结束时间戳" class="headerlink" title="php获取上周起始时间戳和结束时间戳"></a>php获取上周起始时间戳和结束时间戳</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$beginLastweek</span>=mktime(0,0,0,date(<span class="string">'m'</span>),date(<span class="string">'d'</span>)-date(<span class="string">'w'</span>)+1-7,date(<span class="string">'Y'</span>));</div><div class="line">// date(<span class="string">"Y-m-d H:i:s"</span>,mktime(0, 0 , 0,date(<span class="string">"m"</span>),date(<span class="string">"d"</span>)-date(<span class="string">"w"</span>)+1-7,date(<span class="string">"Y"</span>)));</div><div class="line"><span class="variable">$endLastweek</span>=mktime(23,59,59,date(<span class="string">'m'</span>),date(<span class="string">'d'</span>)-date(<span class="string">'w'</span>)+7-7,date(<span class="string">'Y'</span>));</div><div class="line">// date(<span class="string">"Y-m-d H:i:s"</span>,mktime(23,59,59,date(<span class="string">"m"</span>),date(<span class="string">"d"</span>)-date(<span class="string">"w"</span>)+7-7,date(<span class="string">"Y"</span>)));</div></pre></td></tr></table></figure>
<h2 id="php获取本月起始时间戳和结束时间戳"><a href="#php获取本月起始时间戳和结束时间戳" class="headerlink" title="php获取本月起始时间戳和结束时间戳"></a>php获取本月起始时间戳和结束时间戳</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$beginThismonth</span>=mktime(0,0,0,date(<span class="string">'m'</span>),1,date(<span class="string">'Y'</span>));</div><div class="line"><span class="variable">$endThismonth</span>=mktime(23,59,59,date(<span class="string">'m'</span>),date(<span class="string">'t'</span>),date(<span class="string">'Y'</span>));</div></pre></td></tr></table></figure>
<h2 id="PHP-mktime-函数用于返回一个日期的-Unix-时间戳。"><a href="#PHP-mktime-函数用于返回一个日期的-Unix-时间戳。" class="headerlink" title="PHP mktime() 函数用于返回一个日期的 Unix 时间戳。"></a>PHP mktime() 函数用于返回一个日期的 Unix 时间戳。</h2><p>语法:<br>mktime(hour,minute,second,month,day,year,is_dst)</p>
<h2 id="获取今天00-00"><a href="#获取今天00-00" class="headerlink" title="获取今天00:00"></a>获取今天00:00</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$todaystart</span> = strtotime(date(<span class="string">'Y-m-d'</span>.<span class="string">'00:00:00'</span>,time()));</div></pre></td></tr></table></figure>
<h2 id="获取今天24-00"><a href="#获取今天24-00" class="headerlink" title="获取今天24:00"></a>获取今天24:00</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$todayend</span> = strtotime(date(<span class="string">'Y-m-d'</span>.<span class="string">'00:00:00'</span>,time()+3600*24));</div></pre></td></tr></table></figure>
<h2 id="统计今天注册的用户"><a href="#统计今天注册的用户" class="headerlink" title="统计今天注册的用户"></a>统计今天注册的用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$todayuser</span>[<span class="string">'create_time'</span>] = array(between,<span class="string">"<span class="variable">$todaystart</span>,<span class="variable">$todayend</span>"</span>);</div><div class="line"><span class="variable">$todaysum</span> = <span class="variable">$Users</span>-&gt;<span class="built_in">where</span>(<span class="variable">$todayuser</span>)-&gt;count();</div></pre></td></tr></table></figure>
<h2 id="获取昨天00-00"><a href="#获取昨天00-00" class="headerlink" title="获取昨天00:00"></a>获取昨天00:00</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$timestart</span> = strtotime(date(<span class="string">'Y-m-d'</span>.<span class="string">'00:00:00'</span>,time()-3600*24));</div></pre></td></tr></table></figure>
<h2 id="获取今天00-00-1"><a href="#获取今天00-00-1" class="headerlink" title="获取今天00:00"></a>获取今天00:00</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$timeend</span> = strtotime(date(<span class="string">'Y-m-d'</span>.<span class="string">'00:00:00'</span>,time()));</div></pre></td></tr></table></figure>
<h2 id="统计昨天注册的用户"><a href="#统计昨天注册的用户" class="headerlink" title="统计昨天注册的用户"></a>统计昨天注册的用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$map</span>[<span class="string">'create_time'</span>] = array(between,<span class="string">"<span class="variable">$timestart</span>,<span class="variable">$timeend</span>"</span>);</div><div class="line"><span class="variable">$daycount</span> = <span class="variable">$Users</span>-&gt;<span class="built_in">where</span>(<span class="variable">$map</span>)-&gt;count();</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$this</span>-&gt;assign(<span class="string">"todaysum"</span>,<span class="variable">$todaysum</span>);</div><div class="line"><span class="variable">$this</span>-&gt;assign(<span class="string">"daycount"</span>,<span class="variable">$daycount</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php 获取今日、昨日、上周、本月的起始时间戳和结束时间戳的方法，主要使用到了 php 的时间函数 mktime。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://weibo.com/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux下开启SSH</title>
    <link href="http://weibo.com/2018/12/06/Linux%E4%B8%8B%E5%BC%80%E5%90%AFSSH/"/>
    <id>http://weibo.com/2018/12/06/Linux下开启SSH/</id>
    <published>2018-12-06T10:24:28.000Z</published>
    <updated>2018-12-06T10:38:58.973Z</updated>
    
    <content type="html"><![CDATA[<p>发现PhpStorm通过sftp上传文件的时候一直上传失败，后来发现是因为ssh不允许root用户远程登录。</p>
<h2 id="1、允许root用户远程登录"><a href="#1、允许root用户远程登录" class="headerlink" title="1、允许root用户远程登录"></a>1、允许root用户远程登录</h2><p>修改ssh服务配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/ssh/sshd_config</div></pre></td></tr></table></figure></p>
<p>调整PermitRootLogin参数值为yes</p>
<h2 id="2、允许无密码登录"><a href="#2、允许无密码登录" class="headerlink" title="2、允许无密码登录"></a>2、允许无密码登录</h2><p>同上，修改ssh服务配置文件，两种情况：<br>1） 将PermitEmptyPasswords yes前面的#号去掉<br>2） 将PermitEmptyPasswords 参数值修改为yes</p>
<h2 id="以上两种配置，均需要重启ssh服务"><a href="#以上两种配置，均需要重启ssh服务" class="headerlink" title="以上两种配置，均需要重启ssh服务"></a>以上两种配置，均需要重启ssh服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">service sshd restart  //或者</div><div class="line">/etc/init.d/ssh restart //或者</div><div class="line">/etc/init.d/sshd restart</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发现PhpStorm通过sftp上传文件的时候一直上传失败，后来发现是因为ssh不允许root用户远程登录。&lt;/p&gt;
&lt;h2 id=&quot;1、允许root用户远程登录&quot;&gt;&lt;a href=&quot;#1、允许root用户远程登录&quot; class=&quot;headerlink&quot; title=&quot;1、
    
    </summary>
    
      <category term="Linux" scheme="http://weibo.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>开启/关闭ubuntu防火墙</title>
    <link href="http://weibo.com/2018/12/06/%E5%BC%80%E5%90%AF-%E5%85%B3%E9%97%ADubuntu%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <id>http://weibo.com/2018/12/06/开启-关闭ubuntu防火墙/</id>
    <published>2018-12-06T03:46:21.000Z</published>
    <updated>2018-12-06T04:17:57.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装防火墙"><a href="#安装防火墙" class="headerlink" title="安装防火墙"></a>安装防火墙</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install ufw</div></pre></td></tr></table></figure>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="1、启用"><a href="#1、启用" class="headerlink" title="1、启用"></a>1、启用</h3><p>sudo ufw enable<br>sudo ufw default deny<br>作用：开启了防火墙并随系统启动同时关闭所有外部对本机的访问（本机访问外部正常）。</p>
<h3 id="2、关闭"><a href="#2、关闭" class="headerlink" title="2、关闭"></a>2、关闭</h3><p>sudo ufw disable </p>
<h3 id="3、查看防火墙状态"><a href="#3、查看防火墙状态" class="headerlink" title="3、查看防火墙状态"></a>3、查看防火墙状态</h3><p>sudo ufw status </p>
<h3 id="4、开启-禁用相应端口或服务举例"><a href="#4、开启-禁用相应端口或服务举例" class="headerlink" title="4、开启/禁用相应端口或服务举例"></a>4、开启/禁用相应端口或服务举例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">sudo ufw allow 80 允许外部访问80端口</div><div class="line">sudo ufw delete allow 80 禁止外部访问80 端口</div><div class="line">sudo ufw allow from 192.168.1.1 允许此IP访问所有的本机端口</div><div class="line">sudo ufw deny smtp 禁止外部访问smtp服务</div><div class="line">sudo ufw delete allow smtp 删除上面建立的某条规则</div><div class="line">sudo ufw deny proto tcp from 10.0.0.0/8 to 192.168.0.1 port 22 要拒绝所有的TCP流量从10.0.0.0/8 到192.168.0.1地址的22端口</div><div class="line"> </div><div class="line">可以允许所有RFC1918网络（局域网/无线局域网的）访问这个主机（/8,/16,/12是一种网络分级）：</div><div class="line">sudo ufw allow from 10.0.0.0/8</div><div class="line">sudo ufw allow from 172.16.0.0/12</div><div class="line">sudo ufw allow from 192.168.0.0/16</div></pre></td></tr></table></figure>
<p>推荐设置<br>sudo apt-get install ufw<br>sudo ufw enable<br>sudo ufw default deny </p>
<p>这样设置已经很安全，如果有特殊需要，可以使用sudo ufw allow开启相应服务。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装防火墙&quot;&gt;&lt;a href=&quot;#安装防火墙&quot; class=&quot;headerlink&quot; title=&quot;安装防火墙&quot;&gt;&lt;/a&gt;安装防火墙&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://weibo.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu14.04使用qemu创建虚拟机并配置桥接网络</title>
    <link href="http://weibo.com/2018/12/06/Ubuntu14-04%E4%BD%BF%E7%94%A8qemu%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%A1%A5%E6%8E%A5%E7%BD%91%E7%BB%9C/"/>
    <id>http://weibo.com/2018/12/06/Ubuntu14-04使用qemu创建虚拟机并配置桥接网络/</id>
    <published>2018-12-06T03:05:40.000Z</published>
    <updated>2018-12-06T04:21:51.790Z</updated>
    
    <content type="html"><![CDATA[<p>需要在宿主机中为虚拟机创建一个</p>
<h5 id="tap虚拟网络接口，"><a href="#tap虚拟网络接口，" class="headerlink" title="tap虚拟网络接口，"></a>tap虚拟网络接口，</h5><p>并创建一个</p>
<h5 id="虚拟网桥br0，"><a href="#虚拟网桥br0，" class="headerlink" title="虚拟网桥br0，"></a>虚拟网桥br0，</h5><p>并将tap和br0桥接起来就可以实现虚拟机的网络了。<br><a id="more"></a><br>配置的步骤：</p>
<h2 id="一、安装两个配置网络所需软件包"><a href="#一、安装两个配置网络所需软件包" class="headerlink" title="一、安装两个配置网络所需软件包"></a>一、安装两个配置网络所需软件包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># apt-get install bridge-utils        // 虚拟网桥工具</span></div><div class="line"><span class="comment"># apt-get install uml-utilities       // UML（User-mode linux）工具</span></div></pre></td></tr></table></figure>
<h2 id="二、配置虚拟网桥br0"><a href="#二、配置虚拟网桥br0" class="headerlink" title="二、配置虚拟网桥br0"></a>二、配置虚拟网桥br0</h2><p>修改网络配置文件 vi /etc/network/interfaces<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">auto lo</div><div class="line">iface lo inet loopback</div><div class="line"></div><div class="line">auto br0</div><div class="line">iface br0 inet static</div><div class="line">        bridge_ports eth0</div><div class="line">address 192.168.199.186</div><div class="line">netmask 255.255.255.0</div><div class="line">gateway 192.168.199.1</div><div class="line">dns-nameserver 8.8.8.8</div><div class="line">bridge_fd 9</div><div class="line">bridge_hello 2</div><div class="line">bridge_maxage 12</div><div class="line">bridge_stp off</div><div class="line"></div><div class="line">auto eth0</div><div class="line">iface eth0 inet static</div><div class="line">address 192.168.199.186</div><div class="line">netmask 255.255.255.0</div><div class="line">gateway 192.168.199.1</div><div class="line">dns-nameserver 8.8.8.8</div></pre></td></tr></table></figure></p>
<p>在适当的位置填上你的环境对应的参数。<br>配置完成之后一定要重启，不然看不到创建的虚拟网桥。</p>
<h2 id="三、手动配置TAP设备的操作"><a href="#三、手动配置TAP设备的操作" class="headerlink" title="三、手动配置TAP设备的操作"></a>三、手动配置TAP设备的操作</h2><p>(最下面有通过interfaces文件在服务器启动时自动配置TAP的步骤)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tunctl -t tap0 -u root              // 创建一个tap0接口，只允许root用户访问</div><div class="line">brctl addif br0 tap0                // 在虚拟网桥中增加一个tap0接口</div><div class="line">ifconfig tap0 0.0.0.0 promisc up    // 打开tap0接口</div><div class="line">brctl showstp br0                   // 显示br0的各个接口</div></pre></td></tr></table></figure></p>
<h2 id="四、启动虚拟机"><a href="#四、启动虚拟机" class="headerlink" title="四、启动虚拟机"></a>四、启动虚拟机</h2><h2 id="五、修改虚拟机的网络配置文件"><a href="#五、修改虚拟机的网络配置文件" class="headerlink" title="五、修改虚拟机的网络配置文件"></a>五、修改虚拟机的网络配置文件</h2><p>vi /etc/network/interfaces<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">auto lo</div><div class="line">iface lo inet loopback</div><div class="line"></div><div class="line">auto eth0</div><div class="line">iface eth0 inet static</div><div class="line">address 192.168.199.187</div><div class="line">netmask 255.255.255.0</div><div class="line">gateway 192.168.199.1</div><div class="line">bridge_fp 9</div><div class="line">bridge_hello 2</div><div class="line">bridge_maxage 12</div><div class="line">bridge_stp off</div><div class="line">dns-nameserver 8.8.8.8</div></pre></td></tr></table></figure></p>
<p>修改完成之后ifdown eth0 &amp;&amp; ifup eth0 或者重启虚拟机</p>
<h2 id="六、为了在系统启动时能够自动配置虚拟网桥和TAP设备，编写"><a href="#六、为了在系统启动时能够自动配置虚拟网桥和TAP设备，编写" class="headerlink" title="六、为了在系统启动时能够自动配置虚拟网桥和TAP设备，编写"></a>六、为了在系统启动时能够自动配置虚拟网桥和TAP设备，编写</h2><p>vi /etc/network/interfaces<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">auto lo</div><div class="line">iface lo inet loopback</div><div class="line"><span class="comment"># auto eth0 //eth0网卡的配置要注释掉</span></div><div class="line"><span class="comment"># iface eth0 inet manual</span></div><div class="line">auto br0</div><div class="line">iface br0 inet static</div><div class="line">        bridge_ports eth0</div><div class="line">address 192.168.199.186</div><div class="line">netmask 255.255.255.0</div><div class="line">gateway 192.168.199.1</div><div class="line">bridge_fd 9</div><div class="line">bridge_hello 2</div><div class="line">bridge_maxage 12</div><div class="line">bridge_stp off</div><div class="line">dns-nameservers 8.8.8.8 114.114.114.114</div><div class="line">auto tap0</div><div class="line">iface tap0 inet manual</div><div class="line">pre-up tunctl -t tap0 -u root</div><div class="line">pre-up ifconfig tap0 0.0.0.0 promisc up</div><div class="line">post-up brctl addif br0 tap0</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需要在宿主机中为虚拟机创建一个&lt;/p&gt;
&lt;h5 id=&quot;tap虚拟网络接口，&quot;&gt;&lt;a href=&quot;#tap虚拟网络接口，&quot; class=&quot;headerlink&quot; title=&quot;tap虚拟网络接口，&quot;&gt;&lt;/a&gt;tap虚拟网络接口，&lt;/h5&gt;&lt;p&gt;并创建一个&lt;/p&gt;
&lt;h5 id=&quot;虚拟网桥br0，&quot;&gt;&lt;a href=&quot;#虚拟网桥br0，&quot; class=&quot;headerlink&quot; title=&quot;虚拟网桥br0，&quot;&gt;&lt;/a&gt;虚拟网桥br0，&lt;/h5&gt;&lt;p&gt;并将tap和br0桥接起来就可以实现虚拟机的网络了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://weibo.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>在Ubuntu中安装和使用kvm</title>
    <link href="http://weibo.com/2018/12/05/%E5%9C%A8Ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8kvm/"/>
    <id>http://weibo.com/2018/12/05/在Ubuntu中安装和使用kvm/</id>
    <published>2018-12-05T04:43:30.000Z</published>
    <updated>2018-12-07T03:26:56.433Z</updated>
    
    <content type="html"><![CDATA[<p>首先解决设备不能上网的问题：<br>手动设置静态IP<br>1、vim /etc/network/interfaces</p>
<p>2、修改文件内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">auto lo</div><div class="line">iface lo inet loopback</div><div class="line"></div><div class="line">auto eth0</div><div class="line">iface eth0 inet static</div><div class="line">address 192.168.199.186</div><div class="line">netmask 255.255.255.0</div><div class="line">gateway 192.168.199.1</div><div class="line">dns-nameserver 8.8.8.8</div></pre></td></tr></table></figure></p>
<p>3、配置DNS解析器<br>vim /etc/reslov.conf，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nameserver 8.8.8.8  //(8.8.8.8谷歌的DNS解析器，可能比较慢)</div><div class="line">nameserver 114.114.114.114  //(国内的DNS解析器)</div></pre></td></tr></table></figure></p>
<p>但是Ubuntu Server 中resolv.conf重启时会被覆盖，解决方法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">1.需要创建一个文件/etc/resolvconf/resolv.conf.d/tail</div><div class="line">sudo vi /etc/resolvconf/resolv.conf.d/tail</div><div class="line"></div><div class="line">2.在该文件中写入自己需要的dns服务器，格式与/etc/resolv.conf相同</div><div class="line">nameserver 8.8.8.8  </div><div class="line"></div><div class="line">3.重启下resolvconf程序</div><div class="line">sudo /etc/init.d/resolvconf restart </div><div class="line"></div><div class="line">再去看看/etc/resolv.conf文件,可以看到自己添加的dns服务器已经加到该文件中</div></pre></td></tr></table></figure></p>
<p>4、重启网络sudo /etc/init.d/networking restart<br>   重启网卡还有以下几种方法：</p>
<a id="more"></a>
<h2 id="Linux重启网卡的三种方法"><a href="#Linux重启网卡的三种方法" class="headerlink" title="Linux重启网卡的三种方法"></a>Linux重启网卡的三种方法</h2><h3 id="一、network"><a href="#一、network" class="headerlink" title="一、network"></a>一、network</h3><p>利用root帐户<br>service network restart<br>或者/etc/init.d/networking restart</p>
<h3 id="二、ifdown-ifup"><a href="#二、ifdown-ifup" class="headerlink" title="二、ifdown/ifup"></a>二、ifdown/ifup</h3><p>ifdown eth0<br>ifup eth0</p>
<h3 id="三、ifconfig"><a href="#三、ifconfig" class="headerlink" title="三、ifconfig"></a>三、ifconfig</h3><p>ifconfig eth0 down<br>ifconfig eth0 up</p>
<h3 id="四、重启失效"><a href="#四、重启失效" class="headerlink" title="四、重启失效"></a>四、重启失效</h3><p>Ubuntu14.04修改配置，重启网卡没有生效，出现如下问题：<br>service  networking restart //重启网络服务<br>stop: Job failed while stopping<br>start: Job is already running: networking</p>
<p>tail -f /var/log/upstart/networking.log //查看错误日志<br>Stopping or restarting the networking job is notsupported.<br>Use ifdown &amp; ifup to reconfigure desired interface.</p>
<p>从以上日志内容可以看出，传统的service重启和停止网络已经不再支持了，需要通过使用ifdown &amp;ifup来实现相应的操作。<br>重启指定网卡：<br>ifdown eth0 &amp;&amp; ifup eth0</p>
<h2 id="su命令不能切换root的问题"><a href="#su命令不能切换root的问题" class="headerlink" title="su命令不能切换root的问题"></a>su命令不能切换root的问题</h2><p>提示su: Authentication failure，只要你sudo passwd root过一次之后，下次再su的时候只要输入密码就可以成功登录了。</p>
<h2 id="Ubuntu安装kvm"><a href="#Ubuntu安装kvm" class="headerlink" title="Ubuntu安装kvm"></a>Ubuntu安装kvm</h2><h3 id="一、安装KVM前的检测工作：检测电脑CPU是否支持虚拟化"><a href="#一、安装KVM前的检测工作：检测电脑CPU是否支持虚拟化" class="headerlink" title="一、安装KVM前的检测工作：检测电脑CPU是否支持虚拟化"></a>一、安装KVM前的检测工作：检测电脑CPU是否支持虚拟化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># egrep -c '(vmx|svm)' /proc/cpuinfo</span></div></pre></td></tr></table></figure>
<p>输出结果为0,不支持<br>输出结果大于0,支持</p>
<h3 id="二、使用root用户给当前用户增加sudo的权限，避免在安装是需要输入root密码"><a href="#二、使用root用户给当前用户增加sudo的权限，避免在安装是需要输入root密码" class="headerlink" title="二、使用root用户给当前用户增加sudo的权限，避免在安装是需要输入root密码"></a>二、使用root用户给当前用户增加sudo的权限，避免在安装是需要输入root密码</h3><p>输入如下命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"zhy ALL=(ALL) ALL"</span> &gt;&gt;/etc/sudoers</div><div class="line"><span class="built_in">echo</span> <span class="string">"zhy ALL=(ALL) NOPASSWD:ALL"</span> &gt;&gt;/etc/sudoers</div></pre></td></tr></table></figure></p>
<p>其中zhy是用户名</p>
<h3 id="三、重新登录Ubuntu，验证sudo权限"><a href="#三、重新登录Ubuntu，验证sudo权限" class="headerlink" title="三、重新登录Ubuntu，验证sudo权限"></a>三、重新登录Ubuntu，验证sudo权限</h3><p>输入sudo apt-get update命令，如果没有提示要求输入密码则表示设置sudo权限成功</p>
<h3 id="四、安装KVM程序包"><a href="#四、安装KVM程序包" class="headerlink" title="四、安装KVM程序包"></a>四、安装KVM程序包</h3><p>root权限下输入命令：<br>sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils<br>安装完成后需要重新登录系统，输入命令groups，确保用户已经加入libvirtd群组中</p>
<h4 id="踩坑-Ubuntu不支持yum安装kvm，适用于CentOS。"><a href="#踩坑-Ubuntu不支持yum安装kvm，适用于CentOS。" class="headerlink" title="踩坑 || Ubuntu不支持yum安装kvm，适用于CentOS。"></a>踩坑 || Ubuntu不支持yum安装kvm，适用于CentOS。</h4><p><a href="https://www.cnblogs.com/lk-fxtx/p/7692773.html" target="_blank" rel="external">参见文档</a></p>
<h3 id="五、验证KVM安装是否成功"><a href="#五、验证KVM安装是否成功" class="headerlink" title="五、验证KVM安装是否成功"></a>五、验证KVM安装是否成功</h3><p>输入命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virsh list --all</div></pre></td></tr></table></figure></p>
<p>如果没有错误提示则安装成功</p>
<h3 id="六、安装KVM虚拟机GUI管理工具"><a href="#六、安装KVM虚拟机GUI管理工具" class="headerlink" title="六、安装KVM虚拟机GUI管理工具"></a>六、安装KVM虚拟机GUI管理工具</h3><p>root权限下输入命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># apt-get install virt-manager</span></div></pre></td></tr></table></figure></p>
<h4 id="踩坑-virt-manager-linux上虚拟机安装错误处理："><a href="#踩坑-virt-manager-linux上虚拟机安装错误处理：" class="headerlink" title="踩坑 || virt-manager linux上虚拟机安装错误处理："></a>踩坑 || virt-manager linux上虚拟机安装错误处理：</h4><p>error: Failed to connect socket to ‘/var/run/libvirt/libvirt-sock’: No such file or directory</p>
<h5 id="1、换成ustc的源，-其他的源请自查"><a href="#1、换成ustc的源，-其他的源请自查" class="headerlink" title="1、换成ustc的源，(其他的源请自查)"></a>1、换成ustc的源，(其他的源请自查)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/apt/sources.list</div></pre></td></tr></table></figure>
<p>修改文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">deb http://debian.ustc.edu.cn/debian stable main non-free contrib</div><div class="line">deb-src http://debian.ustc.edu.cn/debian stable main non-free contrib</div><div class="line">deb http://debian.ustc.edu.cn/debian proposed-updates main contrib non-free</div><div class="line">deb-src http://debian.ustc.edu.cn/debian proposed-updates main contrib non-free</div><div class="line">deb http://debian.ustc.edu.cn/debian-security stable/updates main</div><div class="line"></div><div class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse</div><div class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial main main restricted universe multiverse</span></div><div class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</div><div class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span></div><div class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</div><div class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span></div><div class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</div><div class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span></div></pre></td></tr></table></figure></p>
<h5 id="2、安装kvm"><a href="#2、安装kvm" class="headerlink" title="2、安装kvm"></a>2、安装kvm</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install kvm</div></pre></td></tr></table></figure>
<h5 id="3、卸载virt-manager-再安装一遍"><a href="#3、卸载virt-manager-再安装一遍" class="headerlink" title="3、卸载virt-manager .再安装一遍"></a>3、卸载virt-manager .再安装一遍</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get autoremove virt-manager   //卸载</div><div class="line">sudo apt-get install virt-manager   //安装</div></pre></td></tr></table></figure>
<h5 id="4、去-var-run-libvirt-给-libvirt-sock-libvirt-sock-ro-virtlockd-sock-这三个文件加权限"><a href="#4、去-var-run-libvirt-给-libvirt-sock-libvirt-sock-ro-virtlockd-sock-这三个文件加权限" class="headerlink" title="4、去 /var/run/libvirt  给 libvirt-sock  libvirt-sock-ro virtlockd-sock 这三个文件加权限"></a>4、去 /var/run/libvirt  给 libvirt-sock  libvirt-sock-ro virtlockd-sock 这三个文件加权限</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo chmod -R 777 libvirt-sock</div><div class="line">sudo chmod -R 777 libvirt-sock-ro </div><div class="line">sudo chmod -R 777 virtlockd-sock</div></pre></td></tr></table></figure>
<h5 id="5、重启服务"><a href="#5、重启服务" class="headerlink" title="5、重启服务"></a>5、重启服务</h5><p>service libvirtd restart</p>
<h3 id="七、使用虚拟机GUI管理工具创建虚拟机"><a href="#七、使用虚拟机GUI管理工具创建虚拟机" class="headerlink" title="七、使用虚拟机GUI管理工具创建虚拟机"></a>七、使用虚拟机GUI管理工具创建虚拟机</h3><p>搜索Virtual Machine Manager,打开虚拟机管理工具进行虚拟机的创建<br>创建虚拟机时使用准备好的iso文件，然后按照说明Forward</p>
<h2 id="Xshell连接不上Ubuntu的问题"><a href="#Xshell连接不上Ubuntu的问题" class="headerlink" title="Xshell连接不上Ubuntu的问题"></a>Xshell连接不上Ubuntu的问题</h2><p>通常报错: … … (port:22): connection failed.<br>原因：没有真正开启ssh-server服务<br>解决方法：</p>
<h3 id="一、安装ssh-server服务"><a href="#一、安装ssh-server服务" class="headerlink" title="一、安装ssh-server服务"></a>一、安装ssh-server服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openssh-server</div></pre></td></tr></table></figure>
<h3 id="二、确认ssh-server是否启动"><a href="#二、确认ssh-server是否启动" class="headerlink" title="二、确认ssh-server是否启动"></a>二、确认ssh-server是否启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -e |grep ssh</div></pre></td></tr></table></figure>
<h3 id="三、启动ssh"><a href="#三、启动ssh" class="headerlink" title="三、启动ssh"></a>三、启动ssh</h3><p>如果只有ssh-agent，表示ssh-server还没有启动，需要：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/ssh start</div></pre></td></tr></table></figure></p>
<p>如果看到sshd，则ssh-server已经启动了。</p>
<h3 id="四、补充"><a href="#四、补充" class="headerlink" title="四、补充"></a>四、补充</h3><p>ssh-server配置文件位于：<br>/etc/ssh/sshd_config<br>在这里可以定义SSH的服务端口，默认端口是22，你可以自己定义成其他端口号，<br>如21。然后重启SSH服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/ssh resart</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先解决设备不能上网的问题：&lt;br&gt;手动设置静态IP&lt;br&gt;1、vim /etc/network/interfaces&lt;/p&gt;
&lt;p&gt;2、修改文件内容&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;auto lo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;iface lo inet loopback&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;auto eth0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;iface eth0 inet static&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;address 192.168.199.186&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;netmask 255.255.255.0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gateway 192.168.199.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dns-nameserver 8.8.8.8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3、配置DNS解析器&lt;br&gt;vim /etc/reslov.conf，输入&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;nameserver 8.8.8.8  //(8.8.8.8谷歌的DNS解析器，可能比较慢)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nameserver 114.114.114.114  //(国内的DNS解析器)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是Ubuntu Server 中resolv.conf重启时会被覆盖，解决方法如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1.需要创建一个文件/etc/resolvconf/resolv.conf.d/tail&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo vi /etc/resolvconf/resolv.conf.d/tail&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.在该文件中写入自己需要的dns服务器，格式与/etc/resolv.conf相同&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nameserver 8.8.8.8  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3.重启下resolvconf程序&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo /etc/init.d/resolvconf restart &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;再去看看/etc/resolv.conf文件,可以看到自己添加的dns服务器已经加到该文件中&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4、重启网络sudo /etc/init.d/networking restart&lt;br&gt;   重启网卡还有以下几种方法：&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://weibo.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Webpack</title>
    <link href="http://weibo.com/2018/12/04/Webpack/"/>
    <id>http://weibo.com/2018/12/04/Webpack/</id>
    <published>2018-12-04T11:13:56.000Z</published>
    <updated>2018-12-04T11:25:11.581Z</updated>
    
    <content type="html"><![CDATA[<p>Webpack(模块打包机)是一种模块化工具，用于分析项目结构，找到JavaScript模块以及一些其他的浏览器不能直接圆形的拓展语言(Scss, TypeScript等)，并将其转换和打包为合适的格式供浏览器使用。</p>
<p>Webpack对比Grunt和Gulp：<br>Grunt/Gulp是一种优化前端的开发流程的工具；工作方式是:在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后以自动完成这些任务。</p>
<p>Webpack是一种模块化解决方案，多场景可替代Grunt/Gulp；工作方式：将项目当作一个整体，通过一个给定的主文件(如：index.js),Webpack将从这个文件开始找到项目的所有依赖文件，使用loaders处理它们，最后打包成一个(或者多个)浏览器可是别的JavaScript文件。</p>
<p>Webpack的处理速度相对于Grunt/Gulp更快更直接，能打包更多不同类型的文件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Webpack(模块打包机)是一种模块化工具，用于分析项目结构，找到JavaScript模块以及一些其他的浏览器不能直接圆形的拓展语言(Scss, TypeScript等)，并将其转换和打包为合适的格式供浏览器使用。&lt;/p&gt;
&lt;p&gt;Webpack对比Grunt和Gulp：&lt;
    
    </summary>
    
      <category term="Webpack" scheme="http://weibo.com/categories/Webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>npm模块安装问题</title>
    <link href="http://weibo.com/2018/12/04/npm%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/"/>
    <id>http://weibo.com/2018/12/04/npm模块安装问题/</id>
    <published>2018-12-04T04:31:39.000Z</published>
    <updated>2018-12-04T04:38:32.243Z</updated>
    
    <content type="html"><![CDATA[<p>使用npm进行模块安装</p>
<h2 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install formidable</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="问题：执行命令目录不正确-找不到package-json"><a href="#问题：执行命令目录不正确-找不到package-json" class="headerlink" title="问题：执行命令目录不正确 / 找不到package.json"></a>问题：执行命令目录不正确 / 找不到package.json</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">`-- formidable@1.0.17</div><div class="line"></div><div class="line">npm WARN enoent ENOENT: no such file or directory, open <span class="string">'C:\Users\xxxx\package.json'</span></div><div class="line">npm WARN Neil No description</div><div class="line">npm WARN Neil No repository field.</div><div class="line">npm WARN Neil No README data</div><div class="line">npm WARN Neil No license field.</div></pre></td></tr></table></figure>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>切换<code>npm</code>目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\Users\xxxx&gt;<span class="built_in">cd</span> C:\Program Files\nodejs\node_modules\npm</div></pre></td></tr></table></figure></p>
<h2 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h2><p>初始化生成<code>package.json</code>文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g</div></pre></td></tr></table></figure>
<h2 id="问题：无相关权限"><a href="#问题：无相关权限" class="headerlink" title="问题：无相关权限"></a>问题：无相关权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">npm ERR! Windows_NT 10.0.14393</div><div class="line">npm ERR! argv <span class="string">"C:\\Program Files\\nodejs\\node.exe"</span> <span class="string">"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js"</span> <span class="string">"install"</span> <span class="string">"formidable"</span></div><div class="line">npm ERR! node v6.2.0</div><div class="line">npm ERR! npm  v3.8.9</div><div class="line">npm ERR! path C:\Program Files\nodejs\node_modules\npm\node_modules\.staging</div><div class="line">npm ERR! code EPERM</div><div class="line">npm ERR! errno -4048</div><div class="line">npm ERR! syscall mkdir</div><div class="line"></div><div class="line">npm ERR! Error: EPERM: operation not permitted, mkdir <span class="string">'C:\Program Files\nodejs\node_modules\npm\node_modules\.staging'</span></div><div class="line">npm ERR!     at Error (native)</div><div class="line">......</div></pre></td></tr></table></figure>
<h2 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h2><p>1、打开对应目录<br>C:\Windows\System32</p>
<p>2、以管理员身份运行<br>cmd.exe</p>
<p>3、输入 <code>npm install formidable</code> 命令，等待提示安装成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">C:\Program Files\nodejs\node_modules\npm&gt;npm install formidable</div><div class="line">npm@3.8.9 C:\Program Files\nodejs\node_modules\npm</div><div class="line">`-- formidable@1.0.17  extraneous</div></pre></td></tr></table></figure></p>
<h2 id="问题：重命名文件名异常"><a href="#问题：重命名文件名异常" class="headerlink" title="问题：重命名文件名异常"></a>问题：重命名文件名异常</h2><p>源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var form = new formidable.IncomingForm();</div><div class="line">  form.parse(request, <span class="keyword">function</span>(error, fields, files) &#123;</div><div class="line">    fs.renameSync(files.upload.path, <span class="string">"/tmp/test.png"</span>);</div></pre></td></tr></table></figure></p>
<p>异常<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  <span class="built_in">return</span> binding.rename(pathModule._makeLong(oldPath),</div><div class="line">                 ^</div><div class="line"></div><div class="line">Error: EXDEV: cross-device link not permitted, rename <span class="string">'C:\Users\xxxx\AppData\Local\Temp\upload_e835305b073c34bf9219b7d0290fad46'</span> -&gt; <span class="string">'E:\tmp\test.png'</span></div><div class="line">    at Error (native)</div><div class="line">    at Object.fs.renameSync (fs.js:803:18)</div></pre></td></tr></table></figure></p>
<h2 id="解决办法-3"><a href="#解决办法-3" class="headerlink" title="解决办法"></a>解决办法</h2><p>指定form上传路径，默认指向系统盘<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var form = new formidable.IncomingForm();</div><div class="line">form.uploadDir=<span class="string">'tmp'</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用npm进行模块安装&lt;/p&gt;
&lt;h2 id=&quot;安装命令&quot;&gt;&lt;a href=&quot;#安装命令&quot; class=&quot;headerlink&quot; title=&quot;安装命令&quot;&gt;&lt;/a&gt;安装命令&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install formidable&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="npm" scheme="http://weibo.com/categories/npm/"/>
    
    
  </entry>
  
  <entry>
    <title>常见的浏览器User-Agent</title>
    <link href="http://weibo.com/2018/12/04/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8User-Agent/"/>
    <id>http://weibo.com/2018/12/04/常见的浏览器User-Agent/</id>
    <published>2018-12-04T02:58:01.000Z</published>
    <updated>2018-12-04T03:10:59.621Z</updated>
    
    <content type="html"><![CDATA[<p>UserAgent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，简称UA。<br>向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息。<br>通过UA，用户所访问的网站可以显示不同的排版。<br>浏览器的UA字串的标准格式：浏览器标识(操作系统标识;加密等级标识;浏览器语言)渲染引擎标识版本信息。<br><a id="more"></a></p>
<h2 id="1、浏览器标识"><a href="#1、浏览器标识" class="headerlink" title="1、浏览器标识"></a>1、浏览器标识</h2><p>出于兼容及推广等目的，很多浏览器的标识相同，因此浏览器标识并不能说明浏览器的真实版本，真实版本信息在UA字串尾部可以找到。</p>
<h2 id="2、操作系统标识"><a href="#2、操作系统标识" class="headerlink" title="2、操作系统标识"></a>2、操作系统标识</h2><p>FreeBSD<br>X11;FreeBSD(version no.)i386<br>X11;FreeBSD(version no.)AMD64</p>
<p>Linux<br>X11;Linux ppc<br>X11;Linux ppc64<br>X11;Linux i686<br>X11;Linux x86_64</p>
<p>Mac<br>Macintosh;PPC Mac OS X<br>Macintosh;Intel Mac OS X</p>
<p>Solaris<br>X11;SunOS i86pc<br>X11;SunOs sun4u</p>
<p>Windows<br>Windows NT 6.1   对应windows7<br>Windows NT 6.0   对应windows Vista<br>Windows NT 5.2  对应windows 2003<br>Windows NT 5.1   对应windows xp<br>Windows NT 5.0   对应windows 2000<br>Windows ME<br>Windows 98</p>
<h2 id="3、加密等级标识"><a href="#3、加密等级标识" class="headerlink" title="3、加密等级标识"></a>3、加密等级标识</h2><p>N:表示无安全加密<br>I:表示弱安全加密<br>U:表示强安全加密</p>
<h2 id="4、浏览器语言"><a href="#4、浏览器语言" class="headerlink" title="4、浏览器语言"></a>4、浏览器语言</h2><p>在首选项&gt;常规&gt;语言中指定的语言</p>
<h2 id="5、渲染引擎"><a href="#5、渲染引擎" class="headerlink" title="5、渲染引擎"></a>5、渲染引擎</h2><p>显示浏览器使用的主流渲染引擎有：Gecko、WebKit、KHTML、Presto、Trident、Tasman等，格式为：渲染引擎/版本信息</p>
<h2 id="6、版本信息"><a href="#6、版本信息" class="headerlink" title="6、版本信息"></a>6、版本信息</h2><p>显示浏览器的真实版本信息，格式为：浏览器/版本信息</p>
<p>###浏览器User-Agent的详细信息</p>
<p>PC端：<br>safari5.1–MAC<br>User-Agent:Mozilla/5.0(Macintosh;U;IntelMacOSX10_6_8;en-us)AppleWebKit/534.50(KHTML,likeGecko)Version/5.1Safari/534.50</p>
<p>safari5.1–Windows<br>User-Agent:Mozilla/5.0(Windows;U;WindowsNT6.1;en-us)AppleWebKit/534.50(KHTML,likeGecko)Version/5.1Safari/534.50</p>
<p>IE9.0<br>User-Agent:Mozilla/5.0(compatible;MSIE9.0;WindowsNT6.1;Trident/5.0;</p>
<p>IE8.0<br>User-Agent:Mozilla/4.0(compatible;MSIE8.0;WindowsNT6.0;Trident/4.0)</p>
<p>IE7.0<br>User-Agent:Mozilla/4.0(compatible;MSIE7.0;WindowsNT6.0)</p>
<p>IE6.0<br>User-Agent:Mozilla/4.0(compatible;MSIE6.0;WindowsNT5.1)</p>
<p>Firefox4.0.1–MAC<br>User-Agent:Mozilla/5.0(Macintosh;IntelMacOSX10.6;rv:2.0.1)Gecko/20100101Firefox/4.0.1</p>
<p>Firefox4.0.1–Windows<br>User-Agent:Mozilla/5.0(WindowsNT6.1;rv:2.0.1)Gecko/20100101Firefox/4.0.1</p>
<p>Opera11.11–MAC<br>User-Agent:Opera/9.80(Macintosh;IntelMacOSX10.6.8;U;en)Presto/2.8.131Version/11.11</p>
<p>Opera11.11–Windows<br>User-Agent:Opera/9.80(WindowsNT6.1;U;en)Presto/2.8.131Version/11.11</p>
<p>Chrome17.0–MAC<br>User-Agent:Mozilla/5.0(Macintosh;IntelMacOSX10_7_0)AppleWebKit/535.11(KHTML,likeGecko)Chrome/17.0.963.56Safari/535.11</p>
<p>傲游（Maxthon）<br>User-Agent:Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;Maxthon2.0)</p>
<p>腾讯TT<br>User-Agent:Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;TencentTraveler4.0)</p>
<p>世界之窗（TheWorld）2.x<br>User-Agent:Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1)</p>
<p>世界之窗（TheWorld）3.x<br>User-Agent:Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;TheWorld)</p>
<p>搜狗浏览器1.x<br>User-Agent:Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;Trident/4.0;SE2.XMetaSr1.0;SE2.XMetaSr1.0;.NETCLR2.0.50727;SE2.XMetaSr1.0)</p>
<p>360浏览器<br>User-Agent:Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;360SE)</p>
<p>Avant<br>User-Agent:Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;AvantBrowser)</p>
<p>GreenBrowser<br>User-Agent:Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1)</p>
<p>移动设备端：</p>
<p>safariiOS4.33–iPhone<br>User-Agent:Mozilla/5.0(iPhone;U;CPUiPhoneOS4_3_3likeMacOSX;en-us)AppleWebKit/533.17.9(KHTML,likeGecko)Version/5.0.2Mobile/8J2Safari/6533.18.5</p>
<p>safariiOS4.33–iPodTouch<br>User-Agent:Mozilla/5.0(iPod;U;CPUiPhoneOS4_3_3likeMacOSX;en-us)AppleWebKit/533.17.9(KHTML,likeGecko)Version/5.0.2Mobile/8J2Safari/6533.18.5</p>
<p>safariiOS4.33–iPad<br>User-Agent:Mozilla/5.0(iPad;U;CPUOS4_3_3likeMacOSX;en-us)AppleWebKit/533.17.9(KHTML,likeGecko)Version/5.0.2Mobile/8J2Safari/6533.18.5</p>
<p>AndroidN1<br>User-Agent:Mozilla/5.0(Linux;U;Android2.3.7;en-us;NexusOneBuild/FRF91)AppleWebKit/533.1(KHTML,likeGecko)Version/4.0MobileSafari/533.1</p>
<p>AndroidQQ浏览器Forandroid<br>User-Agent:MQQBrowser/26Mozilla/5.0(Linux;U;Android2.3.7;zh-cn;MB200Build/GRJ22;CyanogenMod-7)AppleWebKit/533.1(KHTML,likeGecko)Version/4.0MobileSafari/533.1</p>
<p>AndroidOperaMobile<br>User-Agent:Opera/9.80(Android2.3.4;Linux;OperaMobi/build-1107180945;U;en-GB)Presto/2.8.149Version/11.10</p>
<p>AndroidPadMotoXoom<br>User-Agent:Mozilla/5.0(Linux;U;Android3.0;en-us;XoomBuild/HRI39)AppleWebKit/534.13(KHTML,likeGecko)Version/4.0Safari/534.13</p>
<p>BlackBerry<br>User-Agent:Mozilla/5.0(BlackBerry;U;BlackBerry9800;en)AppleWebKit/534.1+(KHTML,likeGecko)Version/6.0.0.337MobileSafari/534.1+</p>
<p>WebOSHPTouchpad<br>User-Agent:Mozilla/5.0(hp-tablet;Linux;hpwOS/3.0.0;U;en-US)AppleWebKit/534.6(KHTML,likeGecko)wOSBrowser/233.70Safari/534.6TouchPad/1.0</p>
<p>NokiaN97<br>User-Agent:Mozilla/5.0(SymbianOS/9.4;Series60/5.0NokiaN97-1/20.0.019;Profile/MIDP-2.1Configuration/CLDC-1.1)AppleWebKit/525(KHTML,likeGecko)BrowserNG/7.1.18124</p>
<p>WindowsPhoneMango<br>User-Agent:Mozilla/5.0(compatible;MSIE9.0;WindowsPhoneOS7.5;Trident/5.0;IEMobile/9.0;HTC;Titan)</p>
<p>UC无<br>User-Agent:UCWEB7.0.2.37/28/999</p>
<p>UC标准<br>User-Agent:NOKIA5700/UCWEB7.0.2.37/28/999</p>
<p>UCOpenwave<br>User-Agent:Openwave/UCWEB7.0.2.37/28/999</p>
<p>UCOpera<br>User-Agent:Mozilla/4.0(compatible;MSIE6.0;)Opera/UCWEB7.0.2.37/28/999</p>
<h2 id="浏览器识别"><a href="#浏览器识别" class="headerlink" title="浏览器识别"></a>浏览器识别</h2><h3 id="1、IE浏览器（以IE9-0为例）"><a href="#1、IE浏览器（以IE9-0为例）" class="headerlink" title="1、IE浏览器（以IE9.0为例）"></a>1、IE浏览器（以IE9.0为例）</h3><p>PC端：User-Agent:Mozilla/5.0(compatible;MSIE9.0;WindowsNT6.1;Trident/5.0;<br>移动设备：User-Agent:Mozilla/5.0(compatible;MSIE9.0;WindowsPhoneOS7.5;Trident/5.0;IEMobile/9.0;HTC;Titan)<br>由于遨游、世界之窗、360浏览器、腾讯浏览器以及搜狗浏览器、Avant、GreenBrowser均采用IE的内核，因此IE浏览器判断的标准是”MSIE“字段，MSIE字段后面的数字为版本号，但同时还需要判断不包含”Maxthon“、”Theworld“、”360SE“、”TencentTraveler“、”SE“、”Avant“等字段（GreenBrowser没有明显标识）。移动设备还需要判断IEMobile+版本号。</p>
<h3 id="2、360浏览器"><a href="#2、360浏览器" class="headerlink" title="2、360浏览器"></a>2、360浏览器</h3><p>PC端：User-Agent:Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;Trident/4.0;InfoPath.2;.NET4.0C;.NET4.0E;.NETCLR2.0.50727;360SE)<br>移动设备：暂无<br>360浏览器的判断标准是”360SE”字段，没有版本表示。</p>
<h3 id="3、搜狗浏览器"><a href="#3、搜狗浏览器" class="headerlink" title="3、搜狗浏览器"></a>3、搜狗浏览器</h3><p>PC端：User-Agent:Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;Trident/4.0;SE2.XMetaSr1.0;SE2.XMetaSr1.0;.NETCLR2.0.50727;SE2.XMetaSr1.0)<br>移动设备：暂无<br>搜狗浏览器的判断标准是”SE“、”MetaSr“字段，版本号为SE后面的数字。</p>
<h3 id="4、Chrome"><a href="#4、Chrome" class="headerlink" title="4、Chrome"></a>4、Chrome</h3><p>PC端：Mozilla/5.0(Macintosh;IntelMacOSX10_7_0)AppleWebKit/535.11(KHTML,likeGecko)Chrome/17.0.963.56Safari/535.11<br>移动设备：User-Agent:Mozilla/5.0(Linux;U;Android2.2.1;zh-cn;HTC_Wildfire_A3333Build/FRG83D)AppleWebKit/533.1(KHTML,likeGecko)Version/4.0MobileSafari/533.1<br>PC端chrome浏览器的判断标准是chrome字段，chrome后面的数字为版本号；移动端的chrome浏览器判断”android“、”linux“、”mobilesafari“等字段，version后面的数字为版本号。</p>
<h3 id="5、Safari"><a href="#5、Safari" class="headerlink" title="5、Safari"></a>5、Safari</h3><p>PC端：User-Agent:Mozilla/5.0(Macintosh;U;IntelMacOSX10_6_8;en-us)AppleWebKit/534.50(KHTML,likeGecko)Version/5.1Safari/534.50<br>移动设备：User-Agent:Mozilla/5.0(iPhone;U;CPUiPhoneOS4_3_3likeMacOSX;en-us)AppleWebKit/533.17.9(KHTML,likeGecko)Version/5.0.2Mobile/8J2Safari/6533.18.5<br>由于Chrome及Nokia’sSeries60browser也使用WebKit内核，因此Safari浏览器的判断必须是：包含safari字段，同时不包含chrome等信息，确定后”version/“后面的数字即为版本号。在以上条件下包含Mobile字段的即为移动设备上的Safari浏览器。</p>
<h3 id="6、腾讯浏览器"><a href="#6、腾讯浏览器" class="headerlink" title="6、腾讯浏览器"></a>6、腾讯浏览器</h3><p>PC端：User-Agent:Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;Trident/4.0;TencentTraveler4.0;.NETCLR2.0.50727)<br>移动设备：User-Agent:MQQBrowser/26Mozilla/5.0(Linux;U;Android2.3.7;zh-cn;MB200Build/GRJ22;CyanogenMod-7)AppleWebKit/533.1(KHTML,likeGecko)Version/4.0MobileSafari/533.1<br>腾讯浏览器的判断标准是”TencentTraveler“或者”QQBrowser“，TencentTraveler或QQBrowser后面的数字为版本号。</p>
<h3 id="7、Firefox"><a href="#7、Firefox" class="headerlink" title="7、Firefox"></a>7、Firefox</h3><p>PC端：User-Agent:Mozilla/5.0(WindowsNT6.1;rv:2.0.1)Gecko/20100101Firefox/4.0.1<br>移动设备：User-Agent:Mozilla/5.0(Android;Linuxarmv7l;rv:5.0)Gecko/Firefox/5.0fennec/5.0<br>Firefox的判断标准是Firefox字段，firefox后面的数字为版本号。</p>
<h3 id="8、Theworld"><a href="#8、Theworld" class="headerlink" title="8、Theworld"></a>8、Theworld</h3><p>PC端：User-Agent:Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;TheWorld)<br>移动设备：暂无<br>Theworld浏览器的判断标准是”Theworld“字段，没有标示版本号。<br>需要注意的是：Theworld2.x版本的User-Agent中没有”Theworld“的字段。</p>
<h3 id="9、遨游"><a href="#9、遨游" class="headerlink" title="9、遨游"></a>9、遨游</h3><p>PC端：User-Agent:Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;Maxthon2.0)<br>移动设备：暂无<br>遨游浏览器的判断标准是”Maxthon“，Maxthon后面的数字为版本号。</p>
<h3 id="10、Opera"><a href="#10、Opera" class="headerlink" title="10、Opera"></a>10、Opera</h3><p>PC端：User-Agent:Opera/9.80(WindowsNT6.1;U;en)Presto/2.8.131Version/11.11<br>移动设备：User-Agent:Opera/9.80(Android2.3.4;Linux;Operamobi/adr-1107051709;U;zh-cn)Presto/2.8.149Version/11.10<br>opera浏览器的判断标准是opera字段，opera字段后面的数字为版本号。</p>
<h3 id="11、UC浏览器"><a href="#11、UC浏览器" class="headerlink" title="11、UC浏览器"></a>11、UC浏览器</h3><p>UCWeb有多种模式浏览方式，对应的User-Agent为：<br>UC无<br>User-Agent:UCWEB7.0.2.37/28/999</p>
<p>UC标准<br>User-Agent:NOKIA5700/UCWEB7.0.2.37/28/999</p>
<p>UCOpenwave<br>User-Agent:Openwave/UCWEB7.0.2.37/28/999</p>
<p>UCOpera<br>User-Agent:Mozilla/4.0(compatible;MSIE6.0;)Opera/UCWEB7.0.2.37/28/999</p>
<p>UC浏览器的判断标准是”UCWEB“字段，UCWEB后面的数字为版本号。</p>
<p>操作系统定向<br>操作系统定向依赖于各个浏览器在打开页面时所传输的httpheader信息中的User-Agent</p>
<h2 id="User-Agent中的不同操作系统的识别方法。"><a href="#User-Agent中的不同操作系统的识别方法。" class="headerlink" title="User-Agent中的不同操作系统的识别方法。"></a>User-Agent中的不同操作系统的识别方法。</h2><p>PC端：<br>FreeBSD<br>X11;FreeBSD(version no.)i386<br>X11;FreeBSD(version no.)AMD64</p>
<p>Linux<br>X11;Linux ppc<br>X11;Linux ppc64<br>X11;Linux i686<br>X11;Linux x86_64</p>
<p>Mac<br>Macintosh;PPC Mac OS X<br>Macintosh;Intel Mac OS X</p>
<p>Solaris<br>X11;SunOS i86pc<br>X11;SunOs sun4u</p>
<p>Windows<br>Windows NT 6.1   对应windows7<br>Windows NT 6.0   对应windows Vista<br>Windows NT 5.2  对应windows 2003<br>Windows NT 5.1   对应windows xp<br>Windows NT 5.0   对应windows 2000<br>Windows ME<br>Windows 98</p>
<p>移动设备端：<br>iOS<br>iPhone OS 10_3_3  </p>
<p>iPhone/iPod<br>OS 4_3_3</p>
<p>Android<br>Android 7.1.1    后面数字为版本号</p>
<p>WebOs<br>hpwOS/3.0.0</p>
<p>SymbianOS<br>SymbianOS/9.4</p>
<p>Windows<br>Phone OS </p>
<p>Windows Phone<br>OS 7.5</p>
<p>BlackBerry<br>BlackBerry OS</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UserAgent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，简称UA。&lt;br&gt;向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息。&lt;br&gt;通过UA，用户所访问的网站可以显示不同的排版。&lt;br&gt;浏览器的UA字串的标准格式：浏览器标识(操作系统标识;加密等级标识;浏览器语言)渲染引擎标识版本信息。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://weibo.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP毫秒级时间戳和日期格式转换</title>
    <link href="http://weibo.com/2018/12/03/PHP%E6%AF%AB%E7%A7%92%E7%BA%A7%E6%97%B6%E9%97%B4%E6%88%B3%E5%92%8C%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <id>http://weibo.com/2018/12/03/PHP毫秒级时间戳和日期格式转换/</id>
    <published>2018-12-03T11:44:15.000Z</published>
    <updated>2018-12-03T12:19:58.530Z</updated>
    
    <content type="html"><![CDATA[<p>在并发量搞得情况下。需要开启毫秒级运算<br>mysql  支持：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`create_time` datetime(3) DEFAULT NULL COMMENT <span class="string">'创建时间'</span>,</div></pre></td></tr></table></figure></p>
<p>PHP 代码实现：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    <span class="variable">$a</span> = get_msectime();</div><div class="line">    <span class="variable">$b</span> = get_microtime_format(<span class="variable">$a</span>*0.001);</div><div class="line">    <span class="variable">$c</span> = get_data_format(<span class="variable">$b</span>);</div><div class="line"></div><div class="line">    <span class="built_in">echo</span> <span class="variable">$a</span>;</div><div class="line">    <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;"</span>;</div><div class="line">    <span class="built_in">echo</span> <span class="variable">$b</span>;</div><div class="line">    <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;"</span>;</div><div class="line">    <span class="built_in">echo</span> <span class="variable">$c</span>;</div><div class="line"></div><div class="line">    //返回当前的毫秒时间戳</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">get_msectime</span></span>() &#123;</div><div class="line">        list(<span class="variable">$msec</span>, <span class="variable">$sec</span>) = explode(<span class="string">' '</span>, microtime());</div><div class="line">        <span class="variable">$msectime</span> =  (<span class="built_in">float</span>)sprintf(<span class="string">'%.0f'</span>, (floatval(<span class="variable">$msec</span>) + floatval(<span class="variable">$sec</span>)) * 1000);</div><div class="line">        <span class="built_in">return</span> <span class="variable">$msectime</span>;</div><div class="line">     &#125;</div><div class="line">     </div><div class="line">     /** </div><div class="line">      *时间戳 转   日期格式 ： 精确到毫秒，x代表毫秒</div><div class="line">      */</div><div class="line">     <span class="keyword">function</span> get_microtime_format(<span class="variable">$time</span>)</div><div class="line">     &#123;  </div><div class="line">        <span class="keyword">if</span>(strstr(<span class="variable">$time</span>,<span class="string">'.'</span>))&#123;</div><div class="line">            sprintf(<span class="string">"%01.3f"</span>,<span class="variable">$time</span>); //小数点。不足三位补0</div><div class="line">            list(<span class="variable">$usec</span>, <span class="variable">$sec</span>) = explode(<span class="string">"."</span>,<span class="variable">$time</span>);</div><div class="line">            <span class="variable">$sec</span> = str_pad(<span class="variable">$sec</span>,3,<span class="string">"0"</span>,STR_PAD_RIGHT); //不足3位。右边补0</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="variable">$usec</span> = <span class="variable">$time</span>;</div><div class="line">            <span class="variable">$sec</span> = <span class="string">"000"</span>; </div><div class="line">        &#125;</div><div class="line">        <span class="variable">$date</span> = date(<span class="string">"Y-m-d H:i:s.x"</span>,<span class="variable">$usec</span>);</div><div class="line">        <span class="built_in">return</span> str_replace(<span class="string">'x'</span>, <span class="variable">$sec</span>, <span class="variable">$date</span>);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">      /** 时间日期转时间戳格式，精确到毫秒，</div><div class="line">      *     </div><div class="line">      */</div><div class="line">     <span class="keyword">function</span> get_data_format(<span class="variable">$time</span>)</div><div class="line">     &#123;</div><div class="line">        list(<span class="variable">$usec</span>, <span class="variable">$sec</span>) = explode(<span class="string">"."</span>, <span class="variable">$time</span>);</div><div class="line">        <span class="variable">$date</span> = strtotime(<span class="variable">$usec</span>);</div><div class="line">        <span class="variable">$return_data</span> = str_pad(<span class="variable">$date</span>.<span class="variable">$sec</span>,13,<span class="string">"0"</span>,STR_PAD_RIGHT); //不足13位。右边补0</div><div class="line">        <span class="built_in">return</span> <span class="variable">$return_data</span>;</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在并发量搞得情况下。需要开启毫秒级运算&lt;br&gt;mysql  支持：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/t
    
    </summary>
    
      <category term="PHP" scheme="http://weibo.com/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP读取文件内容的五种方式</title>
    <link href="http://weibo.com/2018/12/03/PHP%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E7%9A%84%E4%BA%94%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://weibo.com/2018/12/03/PHP读取文件内容的五种方式/</id>
    <published>2018-12-03T11:33:02.000Z</published>
    <updated>2018-12-03T11:38:42.716Z</updated>
    
    <content type="html"><![CDATA[<p>实际应用当中，请注意关闭 fclose($fp);</p>
<h2 id="fread"><a href="#fread" class="headerlink" title="fread()"></a>fread()</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    <span class="variable">$file_path</span> = <span class="string">"test.txt"</span>;</div><div class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$file_path</span>))&#123;</div><div class="line">        <span class="variable">$fp</span> = fopen(<span class="variable">$file_path</span>,<span class="string">"r"</span>);</div><div class="line">        <span class="variable">$str</span> = fread(<span class="variable">$fp</span>,filesize(<span class="variable">$file_path</span>));//指定读取大小，这里把整个文件内容读取出来</div><div class="line">        <span class="built_in">echo</span> <span class="variable">$str</span> = str_replace(<span class="string">"\r\n"</span>,<span class="string">"&lt;br /&gt;"</span>,<span class="variable">$str</span>);</div><div class="line">    &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h2 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    <span class="variable">$file_path</span> = <span class="string">"test.txt"</span>;</div><div class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$file_path</span>))&#123;</div><div class="line">        <span class="variable">$str</span> = file_get_contents(<span class="variable">$file_path</span>);//将整个文件内容读入到一个字符串中</div><div class="line">        <span class="variable">$str</span> = str_replace(<span class="string">"\r\n"</span>,<span class="string">"&lt;br /&gt;"</span>,<span class="variable">$str</span>);</div><div class="line">            <span class="built_in">echo</span> <span class="variable">$str</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h2 id="feof-fread"><a href="#feof-fread" class="headerlink" title="feof() fread()"></a>feof() fread()</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    <span class="variable">$file_path</span> = <span class="string">"test.txt"</span>;</div><div class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$file_path</span>))&#123;</div><div class="line">        <span class="variable">$fp</span> = fopen(<span class="variable">$file_path</span>,<span class="string">"r"</span>);</div><div class="line">        <span class="variable">$str</span> = <span class="string">""</span>;</div><div class="line">        <span class="variable">$buffer</span> = 1024;//每次读取 1024 字节</div><div class="line">        <span class="keyword">while</span>(!feof(<span class="variable">$fp</span>))&#123;//循环读取，直至读取完整个文件</div><div class="line">            <span class="variable">$str</span> .= fread(<span class="variable">$fp</span>,<span class="variable">$buffer</span>);</div><div class="line">        &#125; </div><div class="line">        <span class="variable">$str</span> = str_replace(<span class="string">"\r\n"</span>,<span class="string">"&lt;br /&gt;"</span>,<span class="variable">$str</span>);</div><div class="line">            <span class="built_in">echo</span> <span class="variable">$str</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h2 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    <span class="variable">$file_path</span> = <span class="string">"test.txt"</span>;</div><div class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$file_path</span>))&#123;</div><div class="line">        <span class="variable">$file_arr</span> = file(<span class="variable">$file_path</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;count(<span class="variable">$file_arr</span>);<span class="variable">$i</span>++)&#123;//逐行读取文件内容</div><div class="line">            <span class="built_in">echo</span> <span class="variable">$file_arr</span>[<span class="variable">$i</span>].<span class="string">"&lt;br /&gt;"</span>;</div><div class="line">        &#125;</div><div class="line">        /*</div><div class="line">        foreach(<span class="variable">$file_arr</span> as <span class="variable">$value</span>)&#123;</div><div class="line">            <span class="built_in">echo</span> <span class="variable">$value</span>.<span class="string">"&lt;br /&gt;"</span>;</div><div class="line">        &#125;*/</div><div class="line">    &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h2 id="fgets"><a href="#fgets" class="headerlink" title="fgets()"></a>fgets()</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    <span class="variable">$file_path</span> = <span class="string">"test.txt"</span>;</div><div class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$file_path</span>))&#123;</div><div class="line">        <span class="variable">$fp</span> = fopen(<span class="variable">$file_path</span>,<span class="string">"r"</span>);</div><div class="line">        <span class="variable">$str</span> =<span class="string">""</span>;</div><div class="line">        <span class="keyword">while</span>(!feof(<span class="variable">$fp</span>))&#123;</div><div class="line">            <span class="variable">$str</span> .= fgets(<span class="variable">$fp</span>);//逐行读取。如果fgets不写length参数，默认是读取1k。</div><div class="line">        &#125;</div><div class="line">        <span class="variable">$str</span> = str_replace(<span class="string">"\r\n"</span>,<span class="string">"&lt;br /&gt;"</span>,<span class="variable">$str</span>);</div><div class="line">            <span class="built_in">echo</span> <span class="variable">$str</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实际应用当中，请注意关闭 fclose($fp);&lt;/p&gt;
&lt;h2 id=&quot;fread&quot;&gt;&lt;a href=&quot;#fread&quot; class=&quot;headerlink&quot; title=&quot;fread()&quot;&gt;&lt;/a&gt;fread()&lt;/h2&gt;&lt;figure class=&quot;highlight
    
    </summary>
    
      <category term="PHP" scheme="http://weibo.com/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP获取文件信息相关基础函数</title>
    <link href="http://weibo.com/2018/12/03/PHP%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E5%87%BD%E6%95%B0/"/>
    <id>http://weibo.com/2018/12/03/PHP获取文件信息相关基础函数/</id>
    <published>2018-12-03T11:00:09.000Z</published>
    <updated>2018-12-03T11:09:36.375Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//设置临时时区</div><div class="line">&lt;?php</div><div class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</div><div class="line">date_default_timezone_set(<span class="string">'PRC'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 文件信息相关API</div><div class="line">*/</div><div class="line"><span class="variable">$filename</span>=<span class="string">"./test1.txt"</span>;</div><div class="line"></div><div class="line">// <span class="variable">$filename</span>=<span class="string">"test"</span>;</div><div class="line">//filetype(<span class="variable">$filename</span>):获取文件的类型,返回的是文件的类型</div><div class="line"><span class="built_in">echo</span> <span class="string">'文件类型为：'</span>,filetype(<span class="variable">$filename</span>),<span class="string">'&lt;br/&gt;'</span>;</div><div class="line"></div><div class="line">//filesize(<span class="variable">$filename</span>):获得文件的大小,返回字节</div><div class="line"><span class="built_in">echo</span> <span class="string">'文件大小为：'</span>,filesize(<span class="variable">$filename</span>),<span class="string">'&lt;br/&gt;'</span>;</div><div class="line"></div><div class="line">//filectime(<span class="variable">$filename</span>):获取文件的创建时间</div><div class="line"><span class="built_in">echo</span> <span class="string">'文件创建时间为：'</span>,filectime(<span class="variable">$filename</span>),<span class="string">'&lt;br/&gt;'</span>;</div><div class="line"><span class="built_in">echo</span> <span class="string">'文件创建时间为：'</span>,date(<span class="string">'Y年m月d日 H:i:s'</span>,filectime(<span class="variable">$filename</span>)),<span class="string">'&lt;br/&gt;'</span>;</div><div class="line"></div><div class="line">//filemtime(<span class="variable">$filename</span>):文件的修改时间</div><div class="line"><span class="built_in">echo</span> <span class="string">'文件的修改时间为：'</span>,date(<span class="string">"Y/m/d H:i:s"</span>,filemtime(<span class="variable">$filename</span>)),<span class="string">'&lt;br/&gt;'</span>;</div><div class="line"></div><div class="line">//fileatime(<span class="variable">$filename</span>):文件的最后访问时间</div><div class="line"><span class="built_in">echo</span> <span class="string">'文件的最后访问时间为：'</span>,date(<span class="string">"Y/m/d H:i:s"</span>,fileatime(<span class="variable">$filename</span>)),<span class="string">'&lt;br/&gt;'</span>;</div><div class="line"><span class="built_in">echo</span> <span class="string">'&lt;hr/&gt;'</span>;</div><div class="line"></div><div class="line">//检测文件是否可读、可写、可执行is_readable()、is_writeable()、is_executable();</div><div class="line">var_dump(</div><div class="line">is_readable(<span class="variable">$filename</span>),</div><div class="line">is_writable(<span class="variable">$filename</span>),</div><div class="line">is_writeable(<span class="variable">$filename</span>),</div><div class="line">is_executable(<span class="variable">$filename</span>)</div><div class="line">);</div><div class="line"></div><div class="line">//is_file(<span class="variable">$filename</span>):检测是否为文件,并且文件存在</div><div class="line"><span class="variable">$filename</span>=<span class="string">'./test1.txt'</span>;</div><div class="line"><span class="variable">$filename</span>=<span class="string">'./test2.txt'</span>;</div><div class="line">var_dump(is_file(<span class="variable">$filename</span>));</div><div class="line"></div><div class="line">/**</div><div class="line">* pathinfo():文件路径相关信息</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="variable">$filename</span>=<span class="string">"./test1.txt"</span>;</div><div class="line"><span class="variable">$pathinfo</span>=pathinfo(<span class="variable">$filename</span>);</div><div class="line">print_r(<span class="variable">$pathinfo</span>);</div><div class="line">/*</div><div class="line">Array</div><div class="line">(</div><div class="line">[dirname] =&gt; .</div><div class="line">[basename] =&gt; test1.txt</div><div class="line">[extension] =&gt; txt</div><div class="line">[filename] =&gt; test1</div><div class="line">)</div><div class="line">*/</div><div class="line"><span class="built_in">echo</span> <span class="string">'文件扩展名：'</span>,pathinfo(<span class="variable">$filename</span>,PATHINFO_EXTENSION),<span class="string">'&lt;br/&gt;'</span>;</div><div class="line"><span class="built_in">echo</span> <span class="string">'&lt;hr/&gt;'</span>;</div><div class="line"><span class="variable">$filename</span>=__FILE__;</div><div class="line">// <span class="built_in">echo</span> <span class="variable">$filename</span>;</div><div class="line"></div><div class="line"><span class="built_in">echo</span> pathinfo(<span class="variable">$filename</span>,PATHINFO_DIRNAME),<span class="string">'&lt;br/&gt;'</span>;</div><div class="line"><span class="built_in">echo</span> pathinfo(<span class="variable">$filename</span>,PATHINFO_BASENAME),<span class="string">'&lt;br/&gt;'</span>;</div><div class="line"><span class="built_in">echo</span> pathinfo(<span class="variable">$filename</span>,PATHINFO_EXTENSION),<span class="string">'&lt;br/&gt;'</span>;</div><div class="line"><span class="built_in">echo</span> pathinfo(<span class="variable">$filename</span>,PATHINFO_FILENAME),<span class="string">'&lt;br/&gt;'</span>;</div><div class="line"></div><div class="line">//basename():返回路径中的文件名部分</div><div class="line"><span class="built_in">echo</span> basename(<span class="variable">$filename</span>),<span class="string">'&lt;br/&gt;'</span>;</div><div class="line"></div><div class="line"><span class="built_in">echo</span> basename(<span class="variable">$filename</span>,<span class="string">'.php'</span>),<span class="string">'&lt;br/&gt;'</span>;返回路径中的文件名部分 不包含.php后缀</div><div class="line">//dirname():返回文件名中路径部分</div><div class="line"><span class="built_in">echo</span> dirname(<span class="variable">$filename</span>),<span class="string">'&lt;br/&gt;'</span>;</div><div class="line"></div><div class="line">//file_exists():检测文件或者目录是否存在</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div c
    
    </summary>
    
      <category term="PHP" scheme="http://weibo.com/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP操作数组</title>
    <link href="http://weibo.com/2018/12/03/PHP%E6%93%8D%E4%BD%9C%E6%95%B0%E7%BB%84/"/>
    <id>http://weibo.com/2018/12/03/PHP操作数组/</id>
    <published>2018-12-03T10:06:35.000Z</published>
    <updated>2018-12-03T10:57:55.059Z</updated>
    
    <content type="html"><![CDATA[<p>数组的合并，追加，删除，拆分，查找等</p>
<h2 id="1-合并数组"><a href="#1-合并数组" class="headerlink" title="1. 合并数组"></a>1. 合并数组</h2><p>array_merge()函数将数组合并到一起，返回一个联合的数组。所得到的数组以第一个输入数组参数开始，按后面数组参数出现的顺序依次迫加。其形式为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array array_merge (array array1 array2…,arrayN)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>这个函数将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。</p>
<p>如果输入的数组中有相同的字符串键名，则该键名后面的值将覆盖前一个值。然而，如果数组包含数字键名，后面的值将不会覆盖原来的值，而是附加到后面。</p>
<p>如果只给了一个数组并且该数组是数字索引的，则键名会以连续方式重新索引。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line"><span class="variable">$fruits</span> = array(<span class="string">"apple"</span>,<span class="string">"banana"</span>,<span class="string">"pear"</span>);  </div><div class="line"><span class="variable">$numbered</span> = array(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>);  </div><div class="line"><span class="variable">$cards</span> = array_merge(<span class="variable">$fruits</span>, <span class="variable">$numbered</span>);  </div><div class="line">print_r(<span class="variable">$cards</span>);  </div><div class="line">  </div><div class="line">// output  </div><div class="line">// Array ( [0] =&gt; apple [1] =&gt; banana [2] =&gt; pear [3] =&gt; 1 [4] =&gt; 2 [5] =&gt; 3 )  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h2 id="2-追加数组"><a href="#2-追加数组" class="headerlink" title="2. 追加数组"></a>2. 追加数组</h2><p>array_merge_recursive()函数与array_merge()相同，可以将两个或多个数组合并在一起，形成一个联合的数组．两者之间的区别在于，当某个输入数组中的某个键己经存在于结果数组中时该函数会采取不同的处理方式．array_merge()会覆盖前面存在的键/值对， 替换为当前输入数组中的键/值对，而array_merge_recursive()将把两个值合并在一起，形成一个新的数组，并以原有的键作为数组名。 还有一个数组合并的形式，就是递归追加数组。其形式为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array array_merge_recursive(array array1,array array2[…,array arrayN])</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line"><span class="variable">$fruit1</span> = array(<span class="string">"apple"</span> =&gt; <span class="string">"red"</span>, <span class="string">"banana"</span> =&gt; <span class="string">"yellow"</span>);  </div><div class="line"><span class="variable">$fruit2</span> = array(<span class="string">"pear"</span> =&gt; <span class="string">"yellow"</span>, <span class="string">"apple"</span> =&gt; <span class="string">"green"</span>);  </div><div class="line"><span class="variable">$result</span> = array_merge_recursive(<span class="variable">$fruit1</span>, <span class="variable">$fruit2</span>);  </div><div class="line">print_r(<span class="variable">$result</span>);  </div><div class="line">  </div><div class="line">// output  </div><div class="line">// Array ( [apple] =&gt; Array ( [0] =&gt; red [1] =&gt; green ) [banana] =&gt; yellow [pear] =&gt; yellow )  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>现在键 apple 指向一个数组，这个数组由两个颜色值组成的索引数组。</p>
<h2 id="3-连接数组"><a href="#3-连接数组" class="headerlink" title="3. 连接数组"></a>3. 连接数组</h2><p>array_combine()函数会得到一个新数组，它由一组提交的键和对应的值组成。其形式为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">array array_combine(array keys,array values)  </div><div class="line">``` </div><div class="line">注意，两个输入数组必须大小相同，不能为空。示例如下</div><div class="line">``` bash</div><div class="line">&lt;?php  </div><div class="line"><span class="variable">$name</span> = array(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"orange"</span>);  </div><div class="line"><span class="variable">$color</span> = array(<span class="string">"red"</span>, <span class="string">"yellow"</span>, <span class="string">"orange"</span>);  </div><div class="line"><span class="variable">$fruit</span> = array_combine(<span class="variable">$name</span>, <span class="variable">$color</span>);  </div><div class="line">print_r(<span class="variable">$fruit</span>);  </div><div class="line">  </div><div class="line">// output  </div><div class="line">// Array ( [apple] =&gt; red [banana] =&gt; yellow [orange] =&gt; orange )  </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h2 id="4-拆分数组-array-slice"><a href="#4-拆分数组-array-slice" class="headerlink" title="4. 拆分数组 array_slice()"></a>4. 拆分数组 array_slice()</h2><p>array_slice()函数将返回数组中的一部分，从键offset开始，到offset+length位置结束。其形式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">array array_slice (array array, int offset[,int length]) </div><div class="line">```  </div><div class="line"></div><div class="line">offset 为正值时，拆分将从距数组开头的offset 位置开始；如果offset 为负值，则拆分从距数组末尾的offset 位置开始。如果省略了可选参数length，则拆分将从offset 开始，一直到数组的最后一个元素。如果给出了length 且为正数，则会在距数组开头的offset+length 位置结束。相反，如果给出了length且为负数，则在距数组开头的count(input_array)-|length|位置结束。考虑一个例子：</div><div class="line"></div><div class="line">```bash</div><div class="line">&lt;?php  </div><div class="line"><span class="variable">$fruits</span> = array(<span class="string">"Apple"</span>, <span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Pear"</span>, <span class="string">"Grape"</span>, <span class="string">"Lemon"</span>, <span class="string">"Watermelon"</span>);  </div><div class="line"><span class="variable">$subset</span> = array_slice(<span class="variable">$fruits</span>, 3);  </div><div class="line">print_r(<span class="variable">$subset</span>);  </div><div class="line">  </div><div class="line">// output  </div><div class="line">// Array ( [0] =&gt; Pear [1] =&gt; Grape [2] =&gt; Lemon [3] =&gt; Watermelon )  </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>然后我们使用下负长度：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line"><span class="variable">$fruits</span> = array(<span class="string">"Apple"</span>, <span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Pear"</span>, <span class="string">"Grape"</span>, <span class="string">"Lemon"</span>, <span class="string">"Watermelon"</span>);  </div><div class="line"><span class="variable">$subset</span> = array_slice(<span class="variable">$fruits</span>, 2, -2);  </div><div class="line">print_r(<span class="variable">$subset</span>);  </div><div class="line"></div><div class="line">// output  </div><div class="line">// Array ( [0] =&gt; Orange [1] =&gt; Pear [2] =&gt; Grape )  </div><div class="line">?&gt;  </div><div class="line">```</div></pre></td></tr></table></figure></p>
<h2 id="5-接合数组-array-splice"><a href="#5-接合数组-array-splice" class="headerlink" title="5. 接合数组 array_splice()"></a>5. 接合数组 array_splice()</h2><p>array_splice()函数会删除数组中从offset开始到offset+length 结束的所有元素，并以数组的形式返回所删除的元素。其形式为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">array array_splice ( array array , int offset[,length[,array replacement]])   </div><div class="line">``` </div><div class="line"></div><div class="line">offset 为正值时，则接合将从距数组开头的offset 位置开始，offset 为负值时，接合将从距数组末尾的offset 位置开始。如果忽略可选的length 参数，则从offset 位置开始到数组结束之间的所有元素都将被删除。如果给出了length 且为正值，则接合将在距数组开头的offset + leng th 位置结束。相反，如果给出了length且为负值，则结合将在距数组开头的count(input_array)-length的位置结束。实例如下：</div><div class="line"></div><div class="line">``` bash</div><div class="line">&lt;?php    </div><div class="line"><span class="variable">$fruits</span> = array(<span class="string">"Apple"</span>, <span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Pear"</span>, <span class="string">"Grape"</span>, <span class="string">"Lemon"</span>, <span class="string">"Watermelon"</span>);  </div><div class="line"><span class="variable">$subset</span> = array_splice(<span class="variable">$fruits</span>, 4);  </div><div class="line">  </div><div class="line">print_r(<span class="variable">$fruits</span>);  </div><div class="line">print_r(<span class="variable">$subset</span>);  </div><div class="line">  </div><div class="line">// output  </div><div class="line">// Array ( [0] =&gt; Apple [1] =&gt; Banana [2] =&gt; Orange [3] =&gt; Pear )   </div><div class="line">// Array ( [0] =&gt; Grape [1] =&gt; Lemon [2] =&gt; Watermelon )  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>可以使用可选参数replacement来指定取代目标部分的数组。实例如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line"><span class="variable">$fruits</span> = array(<span class="string">"Apple"</span>, <span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Pear"</span>, <span class="string">"Grape"</span>, <span class="string">"Lemon"</span>, <span class="string">"Watermelon"</span>);  </div><div class="line"><span class="variable">$subset</span> = array_splice(<span class="variable">$fruits</span>, 2, -1, array(<span class="string">"Green Apple"</span>, <span class="string">"Red Apple"</span>));  </div><div class="line">  </div><div class="line">print_r(<span class="variable">$fruits</span>);  </div><div class="line">print_r(<span class="variable">$subset</span>);  </div><div class="line">  </div><div class="line">// output  </div><div class="line">// Array ( [0] =&gt; Apple [1] =&gt; Banana [2] =&gt; Green Apple [3] =&gt; Red Apple [4] =&gt; Watermelon )   </div><div class="line">// Array ( [0] =&gt; Orange [1] =&gt; Pear [2] =&gt; Grape [3] =&gt; Lemon )  </div><div class="line">?&gt;  </div><div class="line">```</div></pre></td></tr></table></figure>
<p>从程序可以很清楚看到这个函数的使用方法了。</p>
<h2 id="6-数组的交集-array-intersect"><a href="#6-数组的交集-array-intersect" class="headerlink" title="6. 数组的交集 array_intersect()"></a>6. 数组的交集 array_intersect()</h2><p>array_intersect()函数返回一个保留了键的数组，这个数组只由第一个数组中出现的且在其他每个输入数组中都出现的值组成。其形式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">array array_intersect(array array1,array array2[,arrayN…])  </div><div class="line">``` </div><div class="line">下面这个例子将返回在<span class="variable">$fruit1</span>数组中出现的且在<span class="variable">$fruit2</span>和<span class="variable">$fruit3</span>中也出现的所有的水果：</div><div class="line"></div><div class="line">``` bash</div><div class="line">&lt;?php  </div><div class="line"><span class="variable">$fruit1</span> = array(<span class="string">"Apple"</span>,<span class="string">"Banana"</span>,<span class="string">"Orange"</span>);  </div><div class="line"><span class="variable">$fruit2</span> = array(<span class="string">"Pear"</span>,<span class="string">"Apple"</span>,<span class="string">"Grape"</span>);  </div><div class="line"><span class="variable">$fruit3</span> = array(<span class="string">"Watermelon"</span>,<span class="string">"Orange"</span>,<span class="string">"Apple"</span>);  </div><div class="line"><span class="variable">$intersection</span> = array_intersect(<span class="variable">$fruit1</span>, <span class="variable">$fruit2</span>, <span class="variable">$fruit3</span>);  </div><div class="line">print_r(<span class="variable">$intersection</span>);  </div><div class="line">  </div><div class="line">// output  </div><div class="line">// Array ( [0] =&gt; Apple )  </div><div class="line">?&gt;  </div><div class="line">```</div></pre></td></tr></table></figure>
<p>只有在两个元素相等且具有相同的数据类型时，array_intersect()函数才会认为它们是相同的。</p>
<h2 id="7-关联数组的交集-array-intersect-assoc"><a href="#7-关联数组的交集-array-intersect-assoc" class="headerlink" title="7. 关联数组的交集 array_intersect_assoc()"></a>7. 关联数组的交集 array_intersect_assoc()</h2><p>函数array_intersect_assoc()与array_intersect()基本相同，只不过他在比较中还考虑了数组的键。因此，只有在第一个数组中出现，且在所有其他输入数组中也出现的键/值对才返回到结果数组中。<br>形式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">array array_intersect_assoc(array array1,array array2[,arrayN…])  </div><div class="line">``` </div><div class="line"></div><div class="line">下面的例子返回了出现在<span class="variable">$fruit1</span>数组中，也同时出现在<span class="variable">$fruit2</span>与<span class="variable">$fruit3</span>中的所有键/值对：</div><div class="line"></div><div class="line">``` bash</div><div class="line">&lt;?php  </div><div class="line"><span class="variable">$fruit1</span> = array(<span class="string">"red"</span>=&gt;<span class="string">"Apple"</span>,<span class="string">"yellow"</span>=&gt;<span class="string">"Banana"</span>,<span class="string">"orange"</span>=&gt;<span class="string">"Orange"</span>);  </div><div class="line"><span class="variable">$fruit2</span> = array(<span class="string">"yellow"</span>=&gt;<span class="string">"Pear"</span>,<span class="string">"red"</span>=&gt;<span class="string">"Apple"</span>,<span class="string">"purple"</span>=&gt;<span class="string">"Grape"</span>);  </div><div class="line"><span class="variable">$fruit3</span> = array(<span class="string">"green"</span>=&gt;<span class="string">"Watermelon"</span>,<span class="string">"orange"</span>=&gt;<span class="string">"Orange"</span>,<span class="string">"red"</span>=&gt;<span class="string">"Apple"</span>);  </div><div class="line"><span class="variable">$intersection</span> = array_intersect_assoc(<span class="variable">$fruit1</span>, <span class="variable">$fruit2</span>, <span class="variable">$fruit3</span>);  </div><div class="line">print_r(<span class="variable">$intersection</span>);  </div><div class="line">  </div><div class="line">// output  </div><div class="line">// Array ( [red] =&gt; Apple )  </div><div class="line">?&gt;  </div><div class="line">```</div></pre></td></tr></table></figure>
<h2 id="8-数组的差集-array-diff"><a href="#8-数组的差集-array-diff" class="headerlink" title="8. 数组的差集 array_diff()"></a>8. 数组的差集 array_diff()</h2><p>函数array_diff()返回出现在第一个数组中但其他输入数组中没有的值。这个功能与array_intersect()相反。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">array array_diff(array array1,array array2[,arrayN…])  </div><div class="line">``` </div><div class="line"></div><div class="line">实例如下：</div><div class="line"></div><div class="line">``` bash</div><div class="line">&lt;?php  </div><div class="line"><span class="variable">$fruit1</span> = array(<span class="string">"Apple"</span>,<span class="string">"Banana"</span>,<span class="string">"Orange"</span>);  </div><div class="line"><span class="variable">$fruit2</span> = array(<span class="string">"Pear"</span>,<span class="string">"Apple"</span>,<span class="string">"Grape"</span>);  </div><div class="line"><span class="variable">$fruit3</span> = array(<span class="string">"Watermelon"</span>,<span class="string">"Orange"</span>,<span class="string">"Apple"</span>);  </div><div class="line"><span class="variable">$intersection</span> = array_diff(<span class="variable">$fruit1</span>, <span class="variable">$fruit2</span>, <span class="variable">$fruit3</span>);  </div><div class="line">print_r(<span class="variable">$intersection</span>);  </div><div class="line">  </div><div class="line">// output  </div><div class="line">// Array ( [1] =&gt; Banana )  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h2 id="9-关联数组的差集-array-diff-assoc"><a href="#9-关联数组的差集-array-diff-assoc" class="headerlink" title="9. 关联数组的差集 array_diff_assoc()"></a>9. 关联数组的差集 array_diff_assoc()</h2><p>函数array_diff_assoc()与array_diff()基本相同，只是它在比较时还考虑了数组的键。因此，只在第一个数组中出现而不再其他输入数组中出现的键/值对才会返回到结果数组中。其形式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">array array_diff_assoc(array array1,array array2[,arrayN…])  </div><div class="line">``` </div><div class="line"></div><div class="line">下面的例子只返回了[yellow] =&gt; Banana,因为这个特殊的键/值对出现在<span class="variable">$fruit1</span>中，而在<span class="variable">$fruit2</span>和<span class="variable">$fruit3</span>中都不存在。</div><div class="line"></div><div class="line">``` bash</div><div class="line">&lt;?php  </div><div class="line"><span class="variable">$fruit1</span> = array(<span class="string">"red"</span>=&gt;<span class="string">"Apple"</span>,<span class="string">"yellow"</span>=&gt;<span class="string">"Banana"</span>,<span class="string">"orange"</span>=&gt;<span class="string">"Orange"</span>);  </div><div class="line"><span class="variable">$fruit2</span> = array(<span class="string">"yellow"</span>=&gt;<span class="string">"Pear"</span>,<span class="string">"red"</span>=&gt;<span class="string">"Apple"</span>,<span class="string">"purple"</span>=&gt;<span class="string">"Grape"</span>);  </div><div class="line"><span class="variable">$fruit3</span> = array(<span class="string">"green"</span>=&gt;<span class="string">"Watermelon"</span>,<span class="string">"orange"</span>=&gt;<span class="string">"Orange"</span>,<span class="string">"red"</span>=&gt;<span class="string">"Apple"</span>);  </div><div class="line"><span class="variable">$intersection</span> = array_diff_assoc(<span class="variable">$fruit1</span>, <span class="variable">$fruit2</span>, <span class="variable">$fruit3</span>);  </div><div class="line">print_r(<span class="variable">$intersection</span>);  </div><div class="line">  </div><div class="line">// output  </div><div class="line">// Array ( [yellow] =&gt; Banana )  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>使用数组的过程中经常要遍历数组。通常需要遍历数组并获得各个键或值（或者同时获得键和值），所以毫不奇怪，PHP为此提供了一些函数来满足需求。许多函数能完成两项任务，不仅能获取当前指针位置的键或值，还能将指针移向下一个适当的位置。</p>
<h2 id="10-获取当前数组键-key"><a href="#10-获取当前数组键-key" class="headerlink" title="10. 获取当前数组键 key()"></a>10. 获取当前数组键 key()</h2><p>key()函数返回input_array中当前指针所在位置的键。其形式如下<br>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mixed key(array array)</div></pre></td></tr></table></figure></p>
<p>下面的例子通过迭代处理数组并移动指针来输出$fruits数组的键：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$fruits</span> = array(<span class="string">"apple"</span>=&gt;<span class="string">"red"</span>, <span class="string">"banana"</span>=&gt;<span class="string">"yellow"</span>);  </div><div class="line"><span class="keyword">while</span> (<span class="variable">$key</span> = key(<span class="variable">$fruits</span>)) &#123;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s &lt;br /&gt;"</span>, <span class="variable">$key</span>);  </div><div class="line">    next(<span class="variable">$fruits</span>);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">// apple   </div><div class="line">// banana  </div><div class="line">```</div></pre></td></tr></table></figure>
<p>注意，每次调用key()时不会移动指针。为此需要使用next()函数，这个函数的唯一作用就是完成推进指针的任务。</p>
<h2 id="11-获取当前数组值-current"><a href="#11-获取当前数组值-current" class="headerlink" title="11. 获取当前数组值 current()"></a>11. 获取当前数组值 current()</h2><p>current()函数返回数组中当前指针所在位置的数组值。其形式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mixed current(array array)  </div><div class="line">``` </div><div class="line"></div><div class="line">下面修改前面的例子，这一次我们要获取数组值：</div><div class="line"></div><div class="line">``` bash</div><div class="line"><span class="variable">$fruits</span> = array(<span class="string">"apple"</span>=&gt;<span class="string">"red"</span>, <span class="string">"banana"</span>=&gt;<span class="string">"yellow"</span>);  </div><div class="line"><span class="keyword">while</span> (<span class="variable">$fruit</span> = current(<span class="variable">$fruits</span>)) &#123;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s &lt;br /&gt;"</span>, <span class="variable">$fruit</span>);  </div><div class="line">    next(<span class="variable">$fruits</span>);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">// red   </div><div class="line">// yellow   </div><div class="line">```</div></pre></td></tr></table></figure>
<h2 id="12-获取当前数组键和值-each"><a href="#12-获取当前数组键和值-each" class="headerlink" title="12. 获取当前数组键和值 each()"></a>12. 获取当前数组键和值 each()</h2><p>each()函数返回input_array的当前键/值对，并将指针推进一个位置。其形式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">array each(array array)  </div><div class="line">``` </div><div class="line">返回的数组包含四个键，键0和key包含键名，而键1和value包含相应的数据。如果执行each()前指针位于数组末尾，则返回<span class="literal">false</span>。</div><div class="line"></div><div class="line">``` bash</div><div class="line"><span class="variable">$fruits</span> = array(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"orange"</span>, <span class="string">"pear"</span>);  </div><div class="line">print_r ( each(<span class="variable">$fruits</span>) );  </div><div class="line">  </div><div class="line">// Array ( [1] =&gt; apple [value] =&gt; apple [0] =&gt; 0 [key] =&gt; 0 )  </div><div class="line">``` </div><div class="line">each() 经常和 list() 结合使用来遍历数组。本例与上例类似，不过循环输出了整个数组：</div><div class="line"></div><div class="line">``` bash</div><div class="line"><span class="variable">$fruits</span> = array(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"orange"</span>, <span class="string">"pear"</span>);  </div><div class="line">reset(<span class="variable">$fruits</span>);  </div><div class="line">  </div><div class="line"><span class="keyword">while</span> (list(<span class="variable">$key</span>, <span class="variable">$val</span>) = each(<span class="variable">$fruits</span>))  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$key</span> =&gt; <span class="variable">$val</span>&lt;br /&gt;"</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">// 0 =&gt; apple  </div><div class="line">// 1 =&gt; banana  </div><div class="line">// 2 =&gt; orange  </div><div class="line">// 3 =&gt; pear  </div><div class="line">```</div></pre></td></tr></table></figure>
<p>因为将一个数组赋值给另一个数组时会重置原来的数组指针，因此在上例中如果我们在循环内部将 $fruits 赋给了另一个变量的话将会导致无限循环。<br>这就完成了数组的遍历。<br>查找、筛选与搜索数组元素是数组操作的一些常见功能。下面来介绍一下几个相关的函数。 </p>
<h2 id="13-in-array-函数"><a href="#13-in-array-函数" class="headerlink" title="13. in_array()函数"></a>13. in_array()函数</h2><p>in_array()函数在一个数组汇总搜索一个特定值，如果找到这个值返回true，否则返回false。其形式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">boolean in_array(mixed needle,array haystack[,boolean strict]);  </div><div class="line">``` </div><div class="line"></div><div class="line">来看下面的例子，查找变量apple是否已经在数组中，如果在，则输出一段信息：</div><div class="line"></div><div class="line">``` bash</div><div class="line"><span class="variable">$fruit</span> = <span class="string">"apple"</span>;   </div><div class="line"><span class="variable">$fruits</span> = array(<span class="string">"apple"</span>,<span class="string">"banana"</span>,<span class="string">"orange"</span>,<span class="string">"pear"</span>);   </div><div class="line"><span class="keyword">if</span>( in_array(<span class="variable">$fruit</span>,<span class="variable">$fruits</span>) )    </div><div class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$fruit</span> 已经在数组中"</span>;  </div><div class="line">```</div></pre></td></tr></table></figure>
<p>第三个参数可选，它强制in_array()在搜索时考虑类型。</p>
<h2 id="14-array-key-exists-函数"><a href="#14-array-key-exists-函数" class="headerlink" title="14. array_key_exists()函数"></a>14. array_key_exists()函数</h2><p>如果在一个数组中找到一个指定的键，函数array_key_exists()返回true，否则返回false。其形式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">boolean array_key_exists(mixed key,array array);</div></pre></td></tr></table></figure>
<p>下面的例子将在数组键中搜索apple，如果找到，将输出这个水果的颜色：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$fruit</span>[<span class="string">"apple"</span>] = <span class="string">"red"</span>;  </div><div class="line"><span class="variable">$fruit</span>[<span class="string">"banana"</span>] = <span class="string">"yellow"</span>;  </div><div class="line"><span class="variable">$fruit</span>[<span class="string">"pear"</span>] = <span class="string">"green"</span>;  </div><div class="line"><span class="keyword">if</span>(array_key_exists(<span class="string">"apple"</span>, <span class="variable">$fruit</span>))&#123;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"apple's color is %s"</span>,<span class="variable">$fruit</span>[<span class="string">"apple"</span>]);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">//apple<span class="string">'s color is red  </span></div><div class="line"><span class="string">```</span></div></pre></td></tr></table></figure>
<h2 id="15-array-search-函数"><a href="#15-array-search-函数" class="headerlink" title="15. array_search()函数"></a>15. array_search()函数</h2><p>array_search()函数在一个数组中搜索一个指定的值，如果找到则返回相应的键，否则返回false。其形式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mixed array_search(mixed needle,array haystack[,boolean strict])  </div><div class="line">``` </div><div class="line"></div><div class="line">下面的例子在<span class="variable">$fruits</span>中搜索一个特定的日期（December 7），如果找到，则返回相应州的有关信息：</div><div class="line"></div><div class="line">``` bash</div><div class="line"><span class="variable">$fruits</span>[<span class="string">"apple"</span>] = <span class="string">"red"</span>;  </div><div class="line"><span class="variable">$fruits</span>[<span class="string">"banana"</span>] = <span class="string">"yellow"</span>;  </div><div class="line"><span class="variable">$fruits</span>[<span class="string">"watermelon"</span>]=<span class="string">"green"</span>;  </div><div class="line"><span class="variable">$founded</span> = array_search(<span class="string">"green"</span>, <span class="variable">$fruits</span>);  </div><div class="line"><span class="keyword">if</span>(<span class="variable">$founded</span>)   </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s was founded on %s."</span>,<span class="variable">$founded</span>, <span class="variable">$fruits</span>[<span class="variable">$founded</span>]);  </div><div class="line">  </div><div class="line">//watermelon was founded on green.  </div><div class="line">```</div></pre></td></tr></table></figure>
<h2 id="16-array-keys-函数"><a href="#16-array-keys-函数" class="headerlink" title="16. array_keys()函数"></a>16. array_keys()函数</h2><p>array_keys()函数返回一个数组，其中包含所搜索数组中找到的所有键。其形式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">array array_keys(array array[,mixed search_value])  </div><div class="line">```</div></pre></td></tr></table></figure>
<p>如果包含可选参数search_value，则只会返回与该值匹配的键。下面的例子将输出$fruit数组中找到的所有数组：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$fruits</span>[<span class="string">"apple"</span>] = <span class="string">"red"</span>;  </div><div class="line"><span class="variable">$fruits</span>[<span class="string">"banana"</span>] = <span class="string">"yellow"</span>;  </div><div class="line"><span class="variable">$fruits</span>[<span class="string">"watermelon"</span>]=<span class="string">"green"</span>;  </div><div class="line"><span class="variable">$keys</span> = array_keys(<span class="variable">$fruits</span>);  </div><div class="line">print_r(<span class="variable">$keys</span>);  </div><div class="line">  </div><div class="line">//Array ( [0] =&gt; apple [1] =&gt; banana [2] =&gt; watermelon )  </div><div class="line">```</div></pre></td></tr></table></figure>
<h2 id="17-array-values-函数"><a href="#17-array-values-函数" class="headerlink" title="17. array_values()函数"></a>17. array_values()函数</h2><p>array_values()函数返回一个数组中的所有值，并自动为返回的数组提供数值索引。其形式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">array array_values(array array)  </div><div class="line">```</div></pre></td></tr></table></figure>
<p>下面的例子将获取$fruits中找到的各元素的值：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$fruits</span>[<span class="string">"apple"</span>] = <span class="string">"red"</span>;  </div><div class="line"><span class="variable">$fruits</span>[<span class="string">"banana"</span>] = <span class="string">"yellow"</span>;  </div><div class="line"><span class="variable">$fruits</span>[<span class="string">"watermelon"</span>]=<span class="string">"green"</span>;  </div><div class="line"><span class="variable">$values</span> = array_values(<span class="variable">$fruits</span>);  </div><div class="line">print_r(<span class="variable">$values</span>);  </div><div class="line">  </div><div class="line">//Array ( [0] =&gt; red [1] =&gt; yellow [2] =&gt; green )  </div><div class="line">```</div></pre></td></tr></table></figure>
<p>有时候我们需要扩展一个数组，或者删掉数组的一部分，PHP为扩展和缩小数组提供了一些函数。对于那些希望模仿各种队列实现（FIFO、LIFO） 的程序员来说，这些函数可以提供便利。顾名思义，从这些函数的函数名（push、pop、shift和unshift）就清楚地反映出其作用。<br>PS：传统的队列是一种数据结构，删除元素与加入元素的顺序相同，就称为先进先出，或FIFO。相反，栈是另外一种数据结构，其中删除元素的顺序与加入时的顺序相反，这成为后进先出，或LIFO。</p>
<h2 id="18-在数组头添加元素"><a href="#18-在数组头添加元素" class="headerlink" title="18. 在数组头添加元素"></a>18. 在数组头添加元素</h2><p>array_unshift()函数在数组头添加元素。所有己有的数值键都会相应地修改，以反映其在数组中的新位置，但是关联键不受影响。其形式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int array_unshift(array array,mixed variable[,mixed variable])  </div><div class="line">```</div></pre></td></tr></table></figure>
<p>下面这个例子在$fruits数组前面添加了两种水果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$fruits</span> = array(<span class="string">"apple"</span>,<span class="string">"banana"</span>);  </div><div class="line">array_unshift(<span class="variable">$fruits</span>,<span class="string">"orange"</span>,<span class="string">"pear"</span>)  </div><div class="line">// <span class="variable">$fruits</span> = array(<span class="string">"orange"</span>,<span class="string">"pear"</span>,<span class="string">"apple"</span>,<span class="string">"banana"</span>);  </div><div class="line">```</div></pre></td></tr></table></figure>
<h2 id="19-在数组尾添加元素"><a href="#19-在数组尾添加元素" class="headerlink" title="19. 在数组尾添加元素"></a>19. 在数组尾添加元素</h2><p>array_push()函数的返回值是int型，是压入数据后数组中元素的个数，可以为此函数传递多个变量作为参数，同时向数组压入多个变量。其形式为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(array array,mixed variable [,mixed variable...])  </div><div class="line">``` </div><div class="line"></div><div class="line">下面这个例子在<span class="variable">$fruits</span>数组中又添加了两个水果：</div><div class="line"></div><div class="line">``` bash</div><div class="line"><span class="variable">$fruits</span> = array(<span class="string">"apple"</span>,<span class="string">"banana"</span>);  </div><div class="line">array_push(<span class="variable">$fruits</span>,<span class="string">"orange"</span>,<span class="string">"pear"</span>)  </div><div class="line">//<span class="variable">$fruits</span> = array(<span class="string">"apple"</span>,<span class="string">"banana"</span>,<span class="string">"orange"</span>,<span class="string">"pear"</span>)  </div><div class="line">```</div></pre></td></tr></table></figure>
<h2 id="20-从数组头删除值"><a href="#20-从数组头删除值" class="headerlink" title="20. 从数组头删除值"></a>20. 从数组头删除值</h2><p>array_shift()函数删除并返回数组中找到的元素。其结果是，如果使用的是数值健，则所有相应的值都会下移，而使用关联键的数组不受影响。其形式为:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mixed array_shift(array array)  </div><div class="line">```</div></pre></td></tr></table></figure>
<p>下面的例子删除了$fruits数组中的第一个元素apple：</p>
<pre><code class="bash"><span class="variable">$fruits</span> = array(<span class="string">"apple"</span>,<span class="string">"banana"</span>,<span class="string">"orange"</span>,<span class="string">"pear"</span>);  
<span class="variable">$fruit</span> = array_shift(<span class="variable">$fruits</span>);  
// <span class="variable">$fruits</span> = array(<span class="string">"banana"</span>,<span class="string">"orange"</span>,<span class="string">"pear"</span>)  
// <span class="variable">$fruit</span> = <span class="string">"apple"</span>;
</code></pre>
<h2 id="21-从数组尾删除元素"><a href="#21-从数组尾删除元素" class="headerlink" title="21. 从数组尾删除元素"></a>21. 从数组尾删除元素</h2><p>array_pop()函数删除并返回数组的最后一个元素。其形式为：</p>
<pre><code class="bash">mixed array_pop(aray target_array);
</code></pre>
<p>下面的例子从$states数组删除了最后的一个州：</p>
<pre><code class="bash"><span class="variable">$fruits</span> = array(<span class="string">"apple"</span>,<span class="string">"banana"</span>,<span class="string">"orange"</span>,<span class="string">"pear"</span>);  
<span class="variable">$fruit</span> = array_pop(<span class="variable">$fruits</span>);  
//<span class="variable">$fruits</span> = array(<span class="string">"apple"</span>,<span class="string">"banana"</span>,<span class="string">"orange"</span>);  
//<span class="variable">$fruit</span> = <span class="string">"pear"</span>;
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组的合并，追加，删除，拆分，查找等&lt;/p&gt;
&lt;h2 id=&quot;1-合并数组&quot;&gt;&lt;a href=&quot;#1-合并数组&quot; class=&quot;headerlink&quot; title=&quot;1. 合并数组&quot;&gt;&lt;/a&gt;1. 合并数组&lt;/h2&gt;&lt;p&gt;array_merge()函数将数组合并到一起，返回一个联合的数组。所得到的数组以第一个输入数组参数开始，按后面数组参数出现的顺序依次迫加。其形式为：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;array array_merge (array array1 array2…,arrayN)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://weibo.com/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>github上传项目导致gitbash报错的问题</title>
    <link href="http://weibo.com/2018/12/03/github%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%AF%BC%E8%87%B4gitbash%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://weibo.com/2018/12/03/github上传项目导致gitbash报错的问题/</id>
    <published>2018-12-03T09:15:43.000Z</published>
    <updated>2018-12-03T09:23:34.033Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚上传blog的时候，git bash一直报错，主要以下两个错误：<br>1、Run config : Please tell me who you are<br>2、fatal: HttpRequestException encountered<br><a id="more"></a></p>
<h2 id="报错1解决方案"><a href="#报错1解决方案" class="headerlink" title="报错1解决方案"></a>报错1解决方案</h2><p>原因：没有认证自己的名字和邮箱<br>解决方案1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.email <span class="string">"you@example.com"</span>  </div><div class="line">git config --global user.name <span class="string">"Your Name"</span></div></pre></td></tr></table></figure></p>
<p>解决方案2：<br>在项目文件夹下找到.git文件夹，然后用nodepad++打开里面的config文件，添加如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[user]</div><div class="line">    name = XXX(自己的名称)</div><div class="line">    email = XXXX(邮箱)</div></pre></td></tr></table></figure></p>
<h2 id="报错2解决方案"><a href="#报错2解决方案" class="headerlink" title="报错2解决方案"></a>报错2解决方案</h2><p>原因：Github 禁用了TLS v1.0 and v1.1，必须更新Windows的git凭证管理器，才行。<br>解决方案：<br><a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.14.0" target="_blank" rel="external">下载</a><br>点击下载安装 GCMW-1.14.0.exe ,问题就解决了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚上传blog的时候，git bash一直报错，主要以下两个错误：&lt;br&gt;1、Run config : Please tell me who you are&lt;br&gt;2、fatal: HttpRequestException encountered&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS加密七种方法</title>
    <link href="http://weibo.com/2018/12/03/JS%E5%8A%A0%E5%AF%86%E4%B8%83%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://weibo.com/2018/12/03/JS加密七种方法/</id>
    <published>2018-12-03T08:08:18.000Z</published>
    <updated>2018-12-03T11:54:40.425Z</updated>
    
    <content type="html"><![CDATA[<p>本文一共介绍了七种方法：<br>一：最简单的加密解密<br>二：转义字符”\”的妙用<br>三：使用Microsoft出品的脚本编码器Script Encoder来进行编码<br>四：任意添加NUL空字符（十六进制00H）<br>五：无用内容混乱以及换行空格TAB大法<br>六：自写解密函数法<br>七：错误的利用<br><a id="more"></a></p>
<h2 id="1、最简单的加密"><a href="#1、最简单的加密" class="headerlink" title="1、最简单的加密"></a>1、最简单的加密</h2><p>escape() 编码<br>unescape() 解码<br>通过unescape()直接加密的代码不能直接运行，此时需要通过eval(codeString)方法<br>eval(codeString)，这个函数的作用就是检查JavaScript代码并执行，必选项 codeString 参数是包含有效 JavaScript 代码的字符串值，加上上面的解码unescape()，加密后的结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;SCRIPT LANGUAGE=<span class="string">"JavaScript"</span>&gt;  </div><div class="line">    var code=unescape(<span class="string">"%61%6C%65%72%74%28%22%u9ED1%u5BA2%u9632%u7EBF%22%29%3B"</span>);  </div><div class="line">    <span class="built_in">eval</span>(code)  </div><div class="line">&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure></p>
<h2 id="2、转义字符”-”的妙用"><a href="#2、转义字符”-”的妙用" class="headerlink" title="2、转义字符”\”的妙用"></a>2、转义字符”\”的妙用</h2><p>JavaScript提供了一些特殊字符如：\n （换行）、 \r （回车）、\’ （单引号 ）等应该是有所了解的吧？其实”\”后面还可以跟八进制或十六进制的数字，如字符”a”则可以表示为：”\141”或”\x61”（注意是小写字符”x”），至于双字节字符如汉字”黑”则仅能用十六进制表示为”\u9ED1”（注意是小写字符”u”），其中字符”u”表示是双字节字符，根据这个原理例子代码则可以表示为：</p>
<h3 id="八进制转义字符串如下"><a href="#八进制转义字符串如下" class="headerlink" title="八进制转义字符串如下:"></a>八进制转义字符串如下:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;SCRIPT LANGUAGE=<span class="string">"JavaScript"</span>&gt;  </div><div class="line">    <span class="built_in">eval</span>(<span class="string">"\141\154\145\162\164\50\42\u9ED1\u5BA2\u9632\u7EBF\42\51\73"</span>)  </div><div class="line">&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure>
<h3 id="十六进制转义字符串如下"><a href="#十六进制转义字符串如下" class="headerlink" title="十六进制转义字符串如下:"></a>十六进制转义字符串如下:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;SCRIPT LANGUAGE=<span class="string">"JavaScript"</span>&gt;  </div><div class="line"><span class="built_in">eval</span>(<span class="string">"\x61\x6C\x65\x72\x74\x28\x22\u9ED1\u5BA2\u9632\u7EBF\x22\x29\x3B"</span>)  </div><div class="line">&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure>
<p>这次没有了解码函数，因为JavaScript执行时会自行转换，同样解码也是很简单如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;SCRIPT LANGUAGE=<span class="string">"JavaScript"</span>&gt;  </div><div class="line">alert(<span class="string">"\x61\x6C\x65\x72\x74\x28\x22\u9ED1\u5BA2\u9632\u7EBF\x22\x29\x3B"</span>)  </div><div class="line">&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure></p>
<p>就会弹出对话框告诉你解密后的结果！ </p>
<h2 id="3、使用Microsoft出品的脚本编码器Script-Encoder来进行编码"><a href="#3、使用Microsoft出品的脚本编码器Script-Encoder来进行编码" class="headerlink" title="3、使用Microsoft出品的脚本编码器Script Encoder来进行编码"></a>3、使用Microsoft出品的脚本编码器Script Encoder来进行编码</h2><p>直接使用JavaScript调用控件Scripting.Encoder完成的编码！代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;SCRIPT LANGUAGE=<span class="string">"JavaScript"</span>&gt;  </div><div class="line">    var Senc=new ActiveXObject(<span class="string">"Scripting.Encoder"</span>);  </div><div class="line">    var code=<span class="string">'&lt;SCRIPT LANGUAGE="JavaScript"&gt;\r\nalert("黑客防线");\r\n&lt;\/SCRIPT&gt;'</span>;  </div><div class="line">    var Encode=Senc.EncodeScriptFile(<span class="string">".htm"</span>,code,0,<span class="string">""</span>);  </div><div class="line">    alert(Encode);  </div><div class="line">&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure></p>
<p>编码后的结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;SCRIPT LANGUAGE=<span class="string">"JScript.Encode"</span>&gt;<span class="comment">#@~^FgAAAA==@#@&amp;ls DD`J黑客防线r#p@#@&amp;FgMAAA==^#~@&lt;/SCRIPT&gt;</span></div></pre></td></tr></table></figure></p>
<p>解密方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;SCRIPT LANGUAGE=<span class="string">"JScript.Encode"</span>&gt;  </div><div class="line">    <span class="keyword">function</span> decode()  </div><div class="line">    alert(decode.toString());  </div><div class="line">&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure></p>
<p>解密原理：<br>编码后的代码运行前IE会先对其进行解码，如果我们先把加密的代码放入一个自定义函数如上面的decode()中，然后对自定义函数decode调用toString()方法，得到的将是解码后的代码！<br>这样编码得到的代码LANGUAGE属性是JScript.Encode，很容易让人识破，那么还有一个几乎不为人知的window对象的方法execScript()，其原形为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">window.execScript( sExpression, sLanguage )</div></pre></td></tr></table></figure></p>
<p>参数：<br>　sExpression: 必选项。字符串(String)。要被执行的代码。<br>　sLanguage　: 必选项。字符串(String)。指定执行的代码的语言。默认值为 Microsoft JScript<br>使用时，前面的”window”可以省略不写！<br>利用它我们可以很好的运行编码后的JavaScript代码，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;SCRIPT LANGUAGE=<span class="string">"JavaScript"</span>&gt;  </div><div class="line">    execScript(<span class="string">"#@~^FgAAAA==@#@&amp;ls DD`J黑客防线r#p@#@&amp;FgMAAA==^#~@"</span>,<span class="string">"JScript.Encode"</span>)  </div><div class="line">&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">可以利用方法二对其中的&quot;&quot;号内的字符串再进行编码，使得&quot;JScript.Encode&quot;以及编码特征码&quot;#@~^&quot;不出现，效果会更好！ </div><div class="line"></div><div class="line">## 4、任意添加NUL空字符（十六进制00H） </div><div class="line">在HTML网页中任意位置添加任意个数的&quot;空字符&quot;，IE照样会正常显示其中的内容，并正常执行其中的JavaScript 代码，而添加的&quot;空字符&quot;在用一般的编辑器查看时，会显示形如空格或黑块，使得原码很难看懂，如用记事本查看则&quot;空字符&quot;会变成&quot;空格&quot;，利用这个原理加密结果如下：（其中显示的&quot;空格&quot;代表&quot;空字符&quot;） </div><div class="line"></div><div class="line">&lt;S    C    RI    P T L    ANG U    A        G E      </div><div class="line"></div><div class="line"> =&quot;    J    a    v a S    c r    i p t &quot;&gt; </div><div class="line"></div><div class="line">a    l er    t    (&quot; 黑    客 防 线&quot;)    ;    </div><div class="line">   </div><div class="line">&lt;    /    SC    R    I    P    T&gt;  </div><div class="line"></div><div class="line">## 5、无用内容混乱以及换行空格TAB大法 </div><div class="line">在JAVASCRIPT代码中可以加入大量的无用字符串或数字，以及无用代码和注释内容等等，使真正的有用代码埋没在其中，并把有用的代码中能加入换行、空格、TAB的地方加入大量换行、空格、TAB，并可以把正常的字符串用&quot;&quot;来进行换行，这样就会使得代码难以看懂！加密后的形式如下： </div><div class="line">``` bash</div><div class="line">&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;  </div><div class="line">&quot;xajgxsadffgds&quot;;1234567890  </div><div class="line">625623216;var =0;alert//@%%&amp;*()(&amp;(^%^  </div><div class="line">//cctv function//  </div><div class="line">(//hhsaasajx xc  </div><div class="line">/*  </div><div class="line">asjgdsgu*/  </div><div class="line">&quot;黑 </div><div class="line"></div><div class="line">客  </div><div class="line">防线&quot;//ashjgfgf  </div><div class="line">/*  </div><div class="line">@#%^&amp;%96667r45fggbhytjty  </div><div class="line">*/  </div><div class="line">//window  </div><div class="line">)  </div><div class="line">;&quot;#@$#%@#432hu&quot;;212351436  </div><div class="line">&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure>
<h2 id="6、自写解密函数法"><a href="#6、自写解密函数法" class="headerlink" title="6、自写解密函数法"></a>6、自写解密函数法</h2><p>这个方法和一、二差不多，只不过是自己写个函数对代码进行解密，很多VBS病毒使用这种方法对自身进行加密，来防止特征码扫描！下面是写的一个简单的加密解密函数，<br>加密代码如下（详细参照文件”加密.htm”）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;SCRIPT LANGUAGE=<span class="string">"JavaScript"</span>&gt;  </div><div class="line">    <span class="keyword">function</span> compile(code)  </div><div class="line">    &#123;    </div><div class="line">       var c=String.fromCharCode(code.charCodeAt(0)+code.length);  </div><div class="line">       <span class="keyword">for</span>(var i=1;i&lt;code.length;i++)&#123;  </div><div class="line">       c+=String.fromCharCode(code.charCodeAt(i)+code.charCodeAt(i-1));  </div><div class="line">       &#125;  </div><div class="line">       alert(escape(c));  </div><div class="line">    &#125;  </div><div class="line">compile(’alert(<span class="string">"黑客防线"</span>);’)  </div><div class="line">&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure></p>
<p>运行得到加密结果为：o%CD%D1%D7%E6%9CJ%u9EF3%uFA73%uF1D4%u14F1%u7EE1Kd<br>相应的加密后解密的代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;SCRIPT LANGUAGE=<span class="string">"JavaScript"</span>&gt;  </div><div class="line">    <span class="keyword">function</span> uncompile(code)  </div><div class="line">    &#123;  </div><div class="line">       code=unescape(code);  </div><div class="line">       var c=String.fromCharCode(code.charCodeAt(0)-code.length);  </div><div class="line">       <span class="keyword">for</span>(var i=1;i&lt;code.length;i++)&#123;  </div><div class="line">       c+=String.fromCharCode(code.charCodeAt(i)-c.charCodeAt(i-1));  </div><div class="line">       &#125;  </div><div class="line">       <span class="built_in">return</span> c;  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">eval</span>(uncompile(<span class="string">"o%CD%D1%D7%E6%9CJ%u9EF3%uFA73%uF1D4%u14F1%u7EE1Kd"</span>));  </div><div class="line">&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure></p>
<h2 id="7、错误的利用"><a href="#7、错误的利用" class="headerlink" title="7、错误的利用"></a>7、错误的利用</h2><p>利用try{}catch(e){}结构对代码进行测试解密，因为实用性不大<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;SCRIPT LANGUAGE=<span class="string">"JavaScript"</span>&gt; </div><div class="line">    var a=’alert(<span class="string">"黑客防线"</span>);’;  </div><div class="line">    var c=<span class="string">""</span>;  </div><div class="line">    <span class="keyword">for</span>(var i=0;i&lt;a.length;i++)&#123;  </div><div class="line">    c+=String.fromCharCode(a.charCodeAt(i)^61);&#125; </div><div class="line">    alert(c); </div><div class="line"></div><div class="line">    //上面的是加密代码，当然如果真正使用这个方法时，不会把加密写上的  </div><div class="line">    //现在变量c就是加密后的代码 </div><div class="line"></div><div class="line">    //下面的函数t()先假设初始密码为０，解密执行，  </div><div class="line">    //遇到错误则把密码加１，然后接着解密执行，直到正确运行 </div><div class="line"></div><div class="line">    var d=c;    //保存加密后的代码  </div><div class="line">    var b=0;    //假定初始密码为0  </div><div class="line">    t(); </div><div class="line"></div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">t</span></span>()&#123;</div><div class="line">        try&#123;<span class="built_in">eval</span>(c);&#125;</div><div class="line">        catch(e)&#123; </div><div class="line">            c=<span class="string">""</span>; </div><div class="line">            <span class="keyword">for</span>(var i=0;i&lt;d.length;i++)&#123; </div><div class="line">            c+=String.fromCharCode(d.charCodeAt(i)^b);&#125;</div><div class="line">            b+=1; </div><div class="line">            t();</div><div class="line">            //setTimeout(<span class="string">"t()"</span>,0); </div><div class="line">        &#125; </div><div class="line">    &#125;</div><div class="line">&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure></p>
<h2 id="8、JS对URL中的参数进行简单的加密处理"><a href="#8、JS对URL中的参数进行简单的加密处理" class="headerlink" title="8、JS对URL中的参数进行简单的加密处理"></a>8、JS对URL中的参数进行简单的加密处理</h2><p>JavaScript本身支持Base64，因此可以i进行编码和解码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var encodeData = window.btoa(<span class="string">"name=xiaoming&amp;age=10"</span>) //编码</div><div class="line">var decodeData = window.atob(encodeData)  //解码</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文一共介绍了七种方法：&lt;br&gt;一：最简单的加密解密&lt;br&gt;二：转义字符”\”的妙用&lt;br&gt;三：使用Microsoft出品的脚本编码器Script Encoder来进行编码&lt;br&gt;四：任意添加NUL空字符（十六进制00H）&lt;br&gt;五：无用内容混乱以及换行空格TAB大法&lt;br&gt;六：自写解密函数法&lt;br&gt;七：错误的利用&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://weibo.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>ThinkPHP多层MVC</title>
    <link href="http://weibo.com/2017/09/11/ThinkPHP%E5%A4%9A%E5%B1%82MVC/"/>
    <id>http://weibo.com/2017/09/11/ThinkPHP多层MVC/</id>
    <published>2017-09-11T01:08:08.000Z</published>
    <updated>2017-09-11T12:40:11.661Z</updated>
    
    <content type="html"><![CDATA[<p>ThinkPHP基于MVC（Model-View-Controller，模型-视图-控制器）模式，并且均支持多层（multi-Layer）设计。</p>
<h2 id="模型（Model）层"><a href="#模型（Model）层" class="headerlink" title="模型（Model）层"></a>模型（Model）层</h2><p>默认的模型层由Model类构成，但是随着项目的增大和业务体系的复杂化，单一的模型层很难解决要求，ThinkPHP支持多层Model，设计思路很简单，不同的模型层仍然都继承自系统的Model类，但是在目录结构和命名规范上做了区分。<br><a id="more"></a><br>例如在某个项目设计中需要区分数据层、逻辑层、服务层等不同的模型层，我们可以在模块目录下面创建Model、Logic和Service目录，把对用户表的所有模型操作分成三层：<br>1、数据层：Model/UserModel 用于定义数据相关的自动验证和自动完成和数据存取接口<br>2、逻辑层：Logic/UserLogic 用于定义用户相关的业务逻辑<br>3、服务层：Service/UserService 用于定义用户相关的服务接口等<br>而这三个模型操作类统一都继承Model类即可，例如：<br>数据层：Home/Model/UserModel.class.php<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">namespace Home\Model;</div><div class="line">use Think\Model;</div><div class="line">class UserModel extends Model&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>逻辑层：Home/Logic/UserLogic.class.php<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">namespace Home\Logic;</div><div class="line">use Think\Model;</div><div class="line">class UserLogic extends Model&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>服务层：Home/Service/UserService.class.php<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">namespace Home\Service;</div><div class="line">use Think\Model;</div><div class="line">class UserService extends Model&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样区分不同的模型层之后对用户数据的操作就非常清晰，在调用的时候，我们也可以用内置的D方法很方便的调用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">D(<span class="string">'User'</span>) //实例化UserModel</div><div class="line">D(<span class="string">'User'</span>,<span class="string">'Logic'</span>) //实例化UserLogic</div><div class="line">D(<span class="string">'User'</span>,<span class="string">'Service'</span>) //实例化UserService</div></pre></td></tr></table></figure></p>
<p>默认的模型层是Model，我们也可以更改设置，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'DEFAULT_M_LAYER'</span>       =&gt;  <span class="string">'Logic'</span>, // 更改默认的模型层名称为Logic</div></pre></td></tr></table></figure></p>
<p>更改之后，实例化的时候需要改成：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">D(<span class="string">'User'</span>) //实例化UserLogic</div><div class="line">D(<span class="string">'User'</span>,<span class="string">'Model'</span>) //实例化UserModel</div><div class="line">D(<span class="string">'User'</span>,<span class="string">'Service'</span>) //实例化UserService</div></pre></td></tr></table></figure></p>
<p>对模型层的分层划分是很灵活的，开发人员可以根据项目的需要自由定义和增加模型分层，你也完全可以只使用Model层。</p>
<h2 id="视图（View）层"><a href="#视图（View）层" class="headerlink" title="视图（View）层"></a>视图（View）层</h2><p>视图层由模板和模板引擎组成，在模板中可以直接使用PHP代码，通过驱动也可以支持其他第三方的模板引擎。视图的多层可以简单的通过目录（也就是模板主题）区分，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">View/default/User/add.html</div><div class="line">View/blue/User/add.html</div></pre></td></tr></table></figure></p>
<p>复杂一点的多层视图还可以更进一步，采用不同的视图目录来完成，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">view 普通视图层目录</div><div class="line">mobile 手机端访问视图层目录</div></pre></td></tr></table></figure></p>
<p>这样做的好处是每个不同的视图层都可以支持不同的模板主题功能。<br>默认的视图层是View目录，我们可以调整设置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'DEFAULT_V_LAYER'</span>       =&gt;  <span class="string">'Mobile'</span>, // 默认的视图层名称更改为Mobile</div></pre></td></tr></table></figure></p>
<p>非默认视图层目录的模板获取需要使用T函数</p>
<h2 id="控制器（Controller）层"><a href="#控制器（Controller）层" class="headerlink" title="控制器（Controller）层"></a>控制器（Controller）层</h2><p>ThinkPHP的控制器层由核心控制器和业务控制器组成，核心控制器由系统内部的App类完成，负责应用（包括模块、控制器和操作）的调度控制，包括HTTP请求拦截和转发、加载配置等。业务控制器则由用户定义的控制器类完成。多层业务控制器的实现原理和模型的分层类似，例如业务控制器和事件控制器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Controller/UserController //用于用户的业务逻辑控制和调度</div><div class="line">Event/UserEvent //用于用户的事件响应操作</div></pre></td></tr></table></figure></p>
<p>访问控制器 Home/Controller/UserController.class.php 定义如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">namespace Home\Controller;</div><div class="line">use Think\Controller;</div><div class="line">class UserController extends Controller&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>事件控制器 Home/Event/UserEvent.class.php 定义如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">namespace Home\Event;</div><div class="line">use Think\Controller;</div><div class="line">class UserEvent extends Controller&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>UserController负责外部交互响应，通过URL请求响应，例如 <a href="http://serverName/User/index,而" target="_blank" rel="external">http://serverName/User/index,而</a> UserEvent负责内部的事件响应，并且只能在内部调用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">A(<span class="string">'User'</span>,<span class="string">'Event'</span>);</div></pre></td></tr></table></figure></p>
<p>默认的访问控制器层是Controller，我们可以调整设置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'DEFAULT_C_LAYER'</span>       =&gt;  <span class="string">'Event'</span>, // 默认的控制器层名称改为Event</div></pre></td></tr></table></figure></p>
<p>所以是和外部隔离的。<br>多层控制器的划分也不是强制的，可以根据应用的需要自由分层。控制器分层里面可以根据需要调用分层模型，也可以调用不同的分层视图（主题）。<br>在MVC三层中，ThinkPHP并不依赖M或者V，甚至可以只有C或者只有V，这个在ThinkPHP的设计里面是一个很重要的用户体验设计，用户只需要定义视图，在没有C的情况下也能自动识别。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ThinkPHP基于MVC（Model-View-Controller，模型-视图-控制器）模式，并且均支持多层（multi-Layer）设计。&lt;/p&gt;
&lt;h2 id=&quot;模型（Model）层&quot;&gt;&lt;a href=&quot;#模型（Model）层&quot; class=&quot;headerlink&quot; title=&quot;模型（Model）层&quot;&gt;&lt;/a&gt;模型（Model）层&lt;/h2&gt;&lt;p&gt;默认的模型层由Model类构成，但是随着项目的增大和业务体系的复杂化，单一的模型层很难解决要求，ThinkPHP支持多层Model，设计思路很简单，不同的模型层仍然都继承自系统的Model类，但是在目录结构和命名规范上做了区分。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>编写shell脚本最佳实践</title>
    <link href="http://weibo.com/2017/09/10/%E7%BC%96%E5%86%99shell%E8%84%9A%E6%9C%AC%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://weibo.com/2017/09/10/编写shell脚本最佳实践/</id>
    <published>2017-09-10T06:47:35.000Z</published>
    <updated>2017-09-10T07:17:02.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码风格规范"><a href="#代码风格规范" class="headerlink" title="代码风格规范"></a>代码风格规范</h2><h3 id="开头有“蛇棒”"><a href="#开头有“蛇棒”" class="headerlink" title="开头有“蛇棒”"></a>开头有“蛇棒”</h3><p>所谓shebang其实就是在很多脚本的第一行出现的以”#!”开头的注释，他指明了当我们没有指定解释器的时候默认的解释器，一般可能是下面这样:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div></pre></td></tr></table></figure></p>
<p>当然，解释器有很多种，除了bash之外，我们可以用下面的命令查看本机支持的解释器:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/shells</div><div class="line"><span class="comment">#/etc/shells: valid login shells</span></div><div class="line">/bin/sh</div><div class="line">/bin/dash</div><div class="line">/bin/bash</div><div class="line">/bin/rbash</div><div class="line">/user/bin/screen</div></pre></td></tr></table></figure></p>
<p>当我们直接使用./a.sh来执行这个脚本的时候，如果没有shebang，那么它就会默认用$SHELL指定的解释器，否则就会用shebang指定的解释器。<br><a id="more"></a><br>不过，上面这种写法可能不太具备适应性，一般我们会用下面的方式来指定：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div></pre></td></tr></table></figure></p>
<p>这种方式是我们推荐的使用方式。</p>
<h3 id="代码有注释"><a href="#代码有注释" class="headerlink" title="代码有注释"></a>代码有注释</h3><p>注释，显然是一个常识，不过这里还是要再强调一下，这个在shell脚本里尤为重要。因为很多单行的shell命令不是那么浅显易懂，没有注释的话在维护起来会让人尤其的头大。<br>注释的意义不仅在于解释用途，而在于告诉我们注意事项，就像是一个README。<br>具体的来说，对于shell脚本，注释一般包括下面几个部分：<br>1、shebang<br>2、脚本的参数<br>3、脚本的用途<br>4、脚本的注意事项<br>5、脚本的写作时间，作者，版权等<br>6、各个函数前的说明注释<br>7、一些较复杂的单行命令注释</p>
<h3 id="参数要规范"><a href="#参数要规范" class="headerlink" title="参数要规范"></a>参数要规范</h3><p>这一点很重要，当我们的脚本需要接受参数的时候，我们一定要先判断参数是否合乎规范，并给出合适的回显，方便使用者了解参数的使用。<br>最少，最少，我们至少得判断下参数的个数吧：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [[ <span class="variable">$#</span> != 2 ]];<span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Parameter incorrect."</span></div><div class="line">    <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></p>
<h3 id="变量和魔数"><a href="#变量和魔数" class="headerlink" title="变量和魔数"></a>变量和魔数</h3><p>一般情况下我们会将一些重要的环境变量定义在开头，确保这些变量的存在。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> /etc/profile</div><div class="line"><span class="built_in">export</span> PATH=”/usr/<span class="built_in">local</span>/bin:/usr/bin:/bin:/usr/<span class="built_in">local</span>/sbin:/usr/sbin:/sbin:/apps/bin/”</div></pre></td></tr></table></figure></p>
<p>这种定义方式有一个很常见的用途，最典型的应用就是，当我们本地安装了很多java版本时，我们可能需要指定一个java来用。那么这时我们就会在脚本开头重新定义JAVA_HOME以及PATH变量来进行控制。<br>同时，一段好的代码通常是不会有很多硬编码在代码里的“魔数”的。如果一定要有，通常是用一个变量的形式定义在开头，然后调用的时候直接调用这个变量，这样方便日后的修改。</p>
<h3 id="缩进有规矩"><a href="#缩进有规矩" class="headerlink" title="缩进有规矩"></a>缩进有规矩</h3><p>对于shell脚本，缩进是个大问题。因为很多需要缩进的地方(比如if,for语句)都不长，所有很多人都懒得去缩进，而且很多人不习惯用函数，导致缩进功能被弱化。<br>其实正确的缩进是很重要的，尤其是在写函数的时候，否则我们在阅读的时候很容易把函数体跟直接执行的命令搞混。<br>常见的缩进方法主要有”soft tab”和”hard tab”两种。<br>1、所谓soft tab就是使用n个空格进行缩进(n通常是2或4)<br>2、所谓hard tab当然就是指真实的”\t”字符<br>这里不去撕哪种方式最好，只能说各有各的优劣。反正我习惯用hard tab。<br>对于if和for语句之类的，我们最好不要把then，do这些关键字单独写一行，这样看上去比较丑。。。</p>
<h3 id="命名有标准"><a href="#命名有标准" class="headerlink" title="命名有标准"></a>命名有标准</h3><p>所谓命名规范，基本包含下面这几点：<br>1、文件名规范，以.sh结尾，方便识别<br>2、变量名字要有含义，不要拼错<br>3、统一命名风格，写shell一般用小写字母加下划线</p>
<h3 id="编码要统一"><a href="#编码要统一" class="headerlink" title="编码要统一"></a>编码要统一</h3><p>在写脚本的时候尽量使用UTF-8编码，能够支持中文等一些奇奇怪怪的字符。不过虽然能写中文，但是在写注释以及打log的时候还是尽量英文，毕竟很多机器还是没有直接支持中文的，打出来可能会有乱码。</p>
<h3 id="权限记得加"><a href="#权限记得加" class="headerlink" title="权限记得加"></a>权限记得加</h3><p>这一点虽然很小，但是我个人却经常忘记，不加执行权限会导致无法直接执行，有点讨厌</p>
<h3 id="日志和回显"><a href="#日志和回显" class="headerlink" title="日志和回显"></a>日志和回显</h3><p>日志的重要性不必多说，能够方便我们回头纠错，在大型的项目里是非常重要的。<br>如果这个脚本是供用户直接在命令行使用的，那么我们最好还要能够在执行时实时回显执行过程，方便用户掌控。</p>
<h3 id="密码要移除"><a href="#密码要移除" class="headerlink" title="密码要移除"></a>密码要移除</h3><p>不要把密码硬编码在脚本里，不要把密码硬编码在脚本里，不要把密码硬编码在脚本里。<br>重要的事情说三遍，尤其是当脚本托管在类似Github这类平台中时</p>
<h3 id="太长要分行"><a href="#太长要分行" class="headerlink" title="太长要分行"></a>太长要分行</h3><p>在调用某些程序的时候，参数可能会很长，这时候为了保证较好的阅读体验，我们可以用反斜杠来分行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">./configure \</div><div class="line">–prefix=/usr \</div><div class="line">–sbin-path=/usr/sbin/nginx \</div><div class="line">–conf-path=/etc/nginx/nginx.conf \</div></pre></td></tr></table></figure></p>
<p>注意在反斜杠前有个空格。</p>
<h2 id="编码细节规范"><a href="#编码细节规范" class="headerlink" title="编码细节规范"></a>编码细节规范</h2><h3 id="代码有效率"><a href="#代码有效率" class="headerlink" title="代码有效率"></a>代码有效率</h3><p>在使用命令的时候要了解命令的具体做法，尤其当数据处理量大的时候，要时刻考虑该命令是否会影响效率。<br>比如下面的两个sed命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sed -n <span class="string">'1p'</span> file</div><div class="line">sed -n <span class="string">'1p;1q'</span> file</div></pre></td></tr></table></figure></p>
<p>他们的作用一样，都是获取文件的第一行。但是第一条命令会读取整个文件，而第二条命令只读取第一行。当文件很大的时候，仅仅是这样一条命令不一样就会造成巨大的效率差异。<br>当然，这里只是为了举一个例子，这个例子真正正确的用法应该是使用head -n1 file命令</p>
<h3 id="勤用双引号"><a href="#勤用双引号" class="headerlink" title="勤用双引号"></a>勤用双引号</h3><p>几乎所有的大佬都推荐在使用”$”来获取变量的时候最好加上双引号。<br>不加上双引号在很多情况下都会造成很大的麻烦，为什么呢？举一个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment">#已知当前文件夹有一个a.sh的文件</span></div><div class="line">var=<span class="string">"*.sh"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$var</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></div></pre></td></tr></table></figure></p>
<p>他的运行结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a.sh</div><div class="line">*.sh</div></pre></td></tr></table></figure></p>
<p>为啥会这样呢？其实可以解释为它执行了下面的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> *.sh</div><div class="line"><span class="built_in">echo</span> <span class="string">"*.sh"</span></div></pre></td></tr></table></figure></p>
<p>在很多情况下，在将变量作为参数的时候，一定要注意上面这一点，仔细体会其中的差异。上面只是一个非常小的例子，实际应用的时候由于这个细节导致的问题实在是太多了</p>
<h3 id="巧用main函数"><a href="#巧用main函数" class="headerlink" title="巧用main函数"></a>巧用main函数</h3><p>我们知道，像java，C这样的编译型语言都会有一个函数入口，这种结构使得代码可读性很强，我们知道哪些直接执行，那些是函数。但是脚本不一样，脚本属于解释性语言，从第一行直接执行到最后一行，如果在这当中命令与函数糅杂在一起，那就非常难读了。<br>用python的朋友都知道，一个合乎标准的python脚本大体上至少是这样的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line">def func1():</div><div class="line">    pass</div><div class="line">def func2():</div><div class="line">    pass</div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    func1()</div><div class="line">    func2()</div></pre></td></tr></table></figure></p>
<p>他用一个很巧妙的方法实现了我们习惯的main函数，使得代码可读性更强。<br>在shell中，我们也有类似的小技巧:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"><span class="function"><span class="title">func1</span></span>()&#123;</div><div class="line">    <span class="comment">#do sth</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">func2</span></span>()&#123;</div><div class="line">    <span class="comment">#do sth</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">main</span></span>()&#123;</div><div class="line">    func1</div><div class="line">    func2</div><div class="line">&#125;</div><div class="line">main <span class="string">"<span class="variable">$@</span>"</span></div></pre></td></tr></table></figure></p>
<p>我们可以采用这种写法，同样实现类似的main函数，使得脚本的结构化程度更好。</p>
<h3 id="考虑作用域"><a href="#考虑作用域" class="headerlink" title="考虑作用域"></a>考虑作用域</h3><p>shell中默认的变量作用域都是全局的，比如下面的脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line">var=1</div><div class="line"><span class="function"><span class="title">func</span></span>()&#123;</div><div class="line">    var=2</div><div class="line">&#125;</div><div class="line">func</div><div class="line"><span class="built_in">echo</span> <span class="variable">$var</span></div></pre></td></tr></table></figure></p>
<p>他的输出结果就是2而不是1，这样显然不符合我们的编码习惯，很容易造成一些问题。<br>因此，相比直接使用全局变量，我们最好使用local readonly这类的命令，其次我们可以使用declare来声明变量。这些方式都比使用全局方式定义要好。</p>
<h3 id="巧用heredocs"><a href="#巧用heredocs" class="headerlink" title="巧用heredocs"></a>巧用heredocs</h3><p>所谓heredocs，也可以算是一种多行输入的方法，即在”&lt;&lt;”后定一个标识符，接着我们可以输入多行内容，直到再次遇到标识符为止。<br>使用heredocs，我们可以非常方便的生成一些模板文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat&gt;&gt;/etc/rsyncd.conf &lt;&lt; EOF</div><div class="line"><span class="built_in">log</span> file = /usr/<span class="built_in">local</span>/logs/rsyncd.log</div><div class="line">transfer logging = yes</div><div class="line"><span class="built_in">log</span> format = %t %a %m %f %b</div><div class="line">syslog facility = local3</div><div class="line">EOF</div></pre></td></tr></table></figure></p>
<h3 id="学会查路径"><a href="#学会查路径" class="headerlink" title="学会查路径"></a>学会查路径</h3><p>很多情况下，我们会先获取当前脚本的路径，然后一这个路径为基准，去找其他的路径。通常我们是直接用pwd以期获得脚本的路径。<br>不过其实这样是不严谨的，pwd获得的是当前shell的执行路径，而不是当前脚本的执行路径。<br>正确的做法应该是下面这两种：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">script_dir=$(<span class="built_in">cd</span> $(dirname <span class="variable">$0</span>) &amp;&amp; <span class="built_in">pwd</span>)</div><div class="line">script_dir=$(dirname $(readlink -f <span class="variable">$0</span> ))</div></pre></td></tr></table></figure></p>
<p>应当先cd进当前脚本的目录然后再pwd，或者直接读取当前脚本的所在路径。</p>
<h3 id="代码要简短"><a href="#代码要简短" class="headerlink" title="代码要简短"></a>代码要简短</h3><p>这里的简短不单单是指代码长度，而是只用到的命令数。原则上我们应当做到，能一条命令解决的问题绝不用两条命令解决。这不仅牵涉到代码的可读性，而且也关乎代码的执行效率。<br>最最经典的例子如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat /etc/passwd | grep root</div><div class="line">grep root /etc/passwd</div></pre></td></tr></table></figure></p>
<p>cat命令最为人不齿的用法就是这样，用的没有任何意义，明明一条命令可以解决，他非得加根管道</p>
<h3 id="使用新写法"><a href="#使用新写法" class="headerlink" title="使用新写法"></a>使用新写法</h3><p>这里的新写法不是指有多厉害，而是指我们可能更希望使用较新引入的一些语法，更多是偏向代码风格的，比如<br>1、尽量使用func(){}来定义函数，而不是func{}<br>2、尽量使用[[]]来代替[]<br>3、尽量使用$()将命令的结果赋给变量，而不是反引号<br>4、在复杂的场景下尽量使用printf代替echo进行回显<br>事实上，这些新写法很多功能都比旧的写法要强大，用的时候就知道了。</p>
<h3 id="其他小tip"><a href="#其他小tip" class="headerlink" title="其他小tip"></a>其他小tip</h3><p>考虑到还有很多零碎的点，就不一一展开了，这里简单提一提。<br>路径尽量保持绝对路径，绝多路径不容易出错，如果非要用相对路径，最好用./修饰<br>优先使用bash的变量替换代替awk sed，这样更加简短<br>简单的if尽量使用&amp;&amp; ||，写成单行。比如[[ x &gt; 2]] &amp;&amp; echo x<br>当export变量时，尽量加上子脚本的namespace，保证变量不冲突<br>会使用trap捕获信号，并在接受到终止信号时执行一些收尾工作<br>使用mktemp生成临时文件或文件夹<br>利用/dev/null过滤不友好的输出信息<br>会利用命令的返回值判断命令的执行情况<br>使用文件前要判断文件是否存在，否则做好异常处理<br>不要处理ls后的数据(比如ls -l | awk ‘{ print $8 }’)，ls的结果非常不确定，并且平台有关<br>读取文件时不要使用for loop而要使用while read</p>
<h2 id="静态检查工具shellcheck"><a href="#静态检查工具shellcheck" class="headerlink" title="静态检查工具shellcheck"></a>静态检查工具shellcheck</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>为了从制度上保证脚本的质量，我们最简单的想法大概就是搞一个静态检查工具，通过引入工具来弥补开发者可能存在的知识盲点。<br>市面上对于shell的静态检查工具还真不多，找来找去就找到一个叫shellcheck的工具，开源在github上，有8K多的star，看上去还是十分靠谱的。我们可以去他的主页了解具体的安装和使用信息。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>这个工具的对不同平台的支持力度都很大，他至少支持了Debian,Arch,Gentoo,EPEL,Fedora,OS X,openSUSE等等各种的平台的主流包管理工具。安装方便。具体可以参照安装文档</p>
<h3 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h3><p>既然是静态检查工具，就一定可以集成在CI框架里，shellcheck可以非常方便的集成在Travis CI中，供以shell脚本为主语言的项目进行静态检查。</p>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>在文档的Gallery of bad code里，也提供了非常详细的“坏代码”的标准，具有非常不错的参考价值，可以在闲下来的时候当成”Java Puzzlers“之类的书来读读还是很惬意的。</p>
<h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>不过，其实我觉得这个项目最最精华的部分都不是上面的功能，而是他提供了一个非常非常强大的wiki。在这个wiki里，我们可以找到这个工具所有判断的依据。在这里，每一个检测到的问题都可以在wiki里找到对应的问题单号，他不仅告诉我们”这样写不好”，而且告诉我们”为什么这样写不好”，”我们应当怎么写才好”，非常适合刨根问底党进一步研究。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码风格规范&quot;&gt;&lt;a href=&quot;#代码风格规范&quot; class=&quot;headerlink&quot; title=&quot;代码风格规范&quot;&gt;&lt;/a&gt;代码风格规范&lt;/h2&gt;&lt;h3 id=&quot;开头有“蛇棒”&quot;&gt;&lt;a href=&quot;#开头有“蛇棒”&quot; class=&quot;headerlink&quot; title=&quot;开头有“蛇棒”&quot;&gt;&lt;/a&gt;开头有“蛇棒”&lt;/h3&gt;&lt;p&gt;所谓shebang其实就是在很多脚本的第一行出现的以”#!”开头的注释，他指明了当我们没有指定解释器的时候默认的解释器，一般可能是下面这样:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然，解释器有很多种，除了bash之外，我们可以用下面的命令查看本机支持的解释器:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ cat /etc/shells&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#/etc/shells: valid login shells&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/bin/sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/bin/dash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/bin/bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/bin/rbash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/user/bin/screen&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当我们直接使用./a.sh来执行这个脚本的时候，如果没有shebang，那么它就会默认用$SHELL指定的解释器，否则就会用shebang指定的解释器。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
